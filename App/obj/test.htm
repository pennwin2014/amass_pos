<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [..\obj\test.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image ..\obj\test.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 4.1 [Build 481]: Last Updated: Thu Jul 03 16:25:37 2014
<BR><P>
<H3>Maximum Stack Usage =       1380 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; CpuCard_Apdu &rArr; Command_Send &rArr; Read_FIFO &rArr; RF_ReadReg
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[25]">Reset</a>
 <LI><a href="#[9]">ResetInit</a>
 <LI><a href="#[27]">__user_initial_stackheap</a>
 <LI><a href="#[a]">Undefined</a>
 <LI><a href="#[b]">SoftwareInterrupt</a>
 <LI><a href="#[e]">IRQDisable</a>
 <LI><a href="#[f]">IRQEnable</a>
 <LI><a href="#[10]">FIQDisable</a>
 <LI><a href="#[11]">FIQEnable</a>
 <LI><a href="#[c]">PrefetchAbort</a>
 <LI><a href="#[d]">FIQ_Handler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[a]">Undefined</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">Undefined</a><BR>
 <LI><a href="#[c]">PrefetchAbort</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">PrefetchAbort</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[9]">ResetInit</a> from Startup.o(vectors) referenced 3 times from Startup.o(vectors)
 <LI><a href="#[a]">Undefined</a> from Startup.o(vectors) referenced from Startup.o(vectors)
 <LI><a href="#[b]">SoftwareInterrupt</a> from Startup.o(vectors) referenced from Startup.o(vectors)
 <LI><a href="#[c]">PrefetchAbort</a> from Startup.o(vectors) referenced from Startup.o(vectors)
 <LI><a href="#[d]">FIQ_Handler</a> from Startup.o(vectors) referenced from Startup.o(vectors)
 <LI><a href="#[e]">IRQDisable</a> from Startup.o(vectors) referenced from Startup.o(vectors)
 <LI><a href="#[f]">IRQEnable</a> from Startup.o(vectors) referenced from Startup.o(vectors)
 <LI><a href="#[10]">FIQDisable</a> from Startup.o(vectors) referenced from Startup.o(vectors)
 <LI><a href="#[11]">FIQEnable</a> from Startup.o(vectors) referenced from Startup.o(vectors)
 <LI><a href="#[12]">main</a> from main.o(.text) referenced from rtentry2.o(.ARM.Collect$$rtentry$$0000000D)
 <LI><a href="#[13]">GetSCKEY</a> from hd7279a.o(.text) referenced from board.o(.text)
 <LI><a href="#[14]">SCKEYInit</a> from hd7279a.o(.text) referenced from board.o(.text)
 <LI><a href="#[15]">LcdPrint</a> from lcd.o(.text) referenced from board.o(.text)
 <LI><a href="#[16]">LcdInit</a> from lcd.o(.text) referenced from board.o(.text)
 <LI><a href="#[17]">LcdCLS</a> from lcd.o(.text) referenced from board.o(.text)
 <LI><a href="#[18]">InitICReader</a> from mifare.o(.text) referenced from board.o(.text)
 <LI><a href="#[19]">ReadICCardUID</a> from mifare.o(.text) referenced from board.o(.text)
 <LI><a href="#[1a]">COM0_TimeoutHandle</a> from comm.o(.text) referenced from comm.o(.text)
 <LI><a href="#[1b]">COM1_TimeoutHandle</a> from comm.o(.text) referenced from comm.o(.text)
 <LI><a href="#[1c]">IRQ_UART0</a> from comm.o(.text) referenced from comm.o(.text)
 <LI><a href="#[1d]">IRQ_UART1</a> from comm.o(.text) referenced from comm.o(.text)
 <LI><a href="#[1e]">IRQ_Eint3</a> from hd7279a.o(.text) referenced from hd7279a.o(.text)
 <LI><a href="#[1f]">DispayMessage</a> from lcd.o(.text) referenced from hd7279a.o(.text)
 <LI><a href="#[25]">Reset</a> from Startup.o(vectors) referenced from rtc.o(.text)
 <LI><a href="#[21]">IRQ_Timer0</a> from timer.o(.text) referenced from timer.o(.text)
 <LI><a href="#[22]">IRQ_Timer1</a> from timer.o(.text) referenced from timer.o(.text)
 <LI><a href="#[23]">_sputc</a> from _sputc.o(.text) referenced from noretval__2sprintf.o(.text)
 <LI><a href="#[24]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[40]">ReceiveData</a> from main.o(.text) referenced from main.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[25]"></a>Reset</STRONG> (ARM, 0 bytes, Stack size unknown bytes, Startup.o(vectors))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckAlarmTimeAndReset
</UL>

<P><STRONG><a name="[9]"></a>ResetInit</STRONG> (ARM, 0 bytes, Stack size unknown bytes, Startup.o(vectors))
<BR><BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TargetResetInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> Startup.o(vectors)
</UL>
<P><STRONG><a name="[27]"></a>__user_initial_stackheap</STRONG> (ARM, 0 bytes, Stack size unknown bytes, Startup.o(vectors))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[26]"></a>__main</STRONG> (ARM, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetInit
</UL>

<P><STRONG><a name="[2a]"></a>__scatterload</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[2c]"></a>__scatterload_rt2</STRONG> (ARM, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[f9]"></a>__scatterload_null</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[fa]"></a>__decompress</STRONG> (ARM, 68 bytes, Stack size unknown bytes, __dczerorl.o(!!dczerorl), UNUSED)

<P><STRONG><a name="[fb]"></a>__decompress0</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __dczerorl.o(!!dczerorl), UNUSED)

<P><STRONG><a name="[fc]"></a>__scatterload_zeroinit</STRONG> (ARM, 44 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[2d]"></a>_printf_d</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec (via Veneer)
</UL>

<P><STRONG><a name="[e2]"></a>_printf_percent</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf (via Veneer)
</UL>

<P><STRONG><a name="[2f]"></a>_printf_x</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex (via Veneer)
</UL>

<P><STRONG><a name="[fd]"></a>_printf_percent_end</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[31]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init &rArr; _fp_init
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li (via Veneer)
</UL>

<P><STRONG><a name="[33]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[fe]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002A))

<P><STRONG><a name="[ff]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000028))

<P><STRONG><a name="[100]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[101]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[102]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[103]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[104]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[105]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[106]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000006))

<P><STRONG><a name="[107]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000D))

<P><STRONG><a name="[108]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))

<P><STRONG><a name="[109]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[10a]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[10b]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[10c]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[10d]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002F))

<P><STRONG><a name="[10e]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[10f]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[110]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000008))

<P><STRONG><a name="[3b]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls (via Veneer)
</UL>

<P><STRONG><a name="[111]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[112]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[113]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[114]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[115]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[116]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[2b]"></a>__rt_entry</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[117]"></a>__rt_entry_presh_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[35]"></a>__rt_entry_sh</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[37]"></a>__rt_entry_li</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_li &rArr; __rt_lib_init &rArr; _fp_init
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (via Veneer)
</UL>

<P><STRONG><a name="[118]"></a>__rt_entry_postsh_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[38]"></a>__rt_entry_main</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit (via BX)
</UL>

<P><STRONG><a name="[119]"></a>__rt_entry_postli_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[f1]"></a>__rt_exit</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit (via Veneer)
</UL>

<P><STRONG><a name="[3a]"></a>__rt_exit_ls</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown (via Veneer)
</UL>

<P><STRONG><a name="[11a]"></a>__rt_exit_prels_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[3c]"></a>__rt_exit_exit</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[3e]"></a>ByteToDecStr</STRONG> (ARM, 92 bytes, Stack size 16 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>

<P><STRONG><a name="[11b]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, maybetermalloc1.o(.emb_text), UNUSED)

<P><STRONG><a name="[40]"></a>ReceiveData</STRONG> (ARM, 52 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ReceiveData &rArr; COM_SendBuf &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_SendBuf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[43]"></a>InitCom</STRONG> (ARM, 108 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = InitCom &rArr; StartComm &rArr; UART_Init &rArr; UART1_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartComm
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11c]"></a>get_test_comm_data</STRONG> (ARM, 116 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[12]"></a>main</STRONG> (ARM, 192 bytes, Stack size 80 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1380 + Unknown Stack Size
<LI>Call Chain = main &rArr; CpuCard_Apdu &rArr; Command_Send &rArr; Read_FIFO &rArr; RF_ReadReg
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_init_info
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_do_sckey
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_sys_info
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Reader_TimeOut
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetCard_A
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitBoard
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTime
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSCKEY
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Deselect_A
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CpuCard_Apdu
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitCom
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtentry2.o(.ARM.Collect$$rtentry$$0000000D)
</UL>
<P><STRONG><a name="[4f]"></a>sp_disp_test</STRONG> (ARM, 124 bytes, Stack size 112 bytes, menu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via Veneer)
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdPrint
</UL>

<P><STRONG><a name="[52]"></a>sp_disp_press_key</STRONG> (ARM, 80 bytes, Stack size 112 bytes, menu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via Veneer)
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdPrint
</UL>

<P><STRONG><a name="[53]"></a>sp_disp_menu_main</STRONG> (ARM, 116 bytes, Stack size 16 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 204 + Unknown Stack Size
<LI>Call Chain = sp_disp_menu_main &rArr; LcdPrint &rArr; Lcd_DisplayFont &rArr; SF_Read &rArr; FlashFastRead &rArr; Serialize
</UL>
<BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdPrint
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdCLS
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_do_sckey
</UL>

<P><STRONG><a name="[54]"></a>sp_disp_menu_set</STRONG> (ARM, 44 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196 + Unknown Stack Size
<LI>Call Chain = sp_disp_menu_set &rArr; LcdPrint &rArr; Lcd_DisplayFont &rArr; SF_Read &rArr; FlashFastRead &rArr; Serialize
</UL>
<BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdPrint
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdCLS
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_do_sckey
</UL>

<P><STRONG><a name="[11d]"></a>sp_disp_menu_consume</STRONG> (ARM, 4 bytes, Stack size 0 bytes, menu.o(.text), UNUSED)

<P><STRONG><a name="[4a]"></a>sp_do_sckey</STRONG> (ARM, 336 bytes, Stack size 16 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220 + Unknown Stack Size
<LI>Call Chain = sp_do_sckey &rArr; sp_disp_menu_main &rArr; LcdPrint &rArr; Lcd_DisplayFont &rArr; SF_Read &rArr; FlashFastRead &rArr; Serialize
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_disp_menu_set
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_disp_menu_main
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[56]"></a>pb_protocol_crc</STRONG> (ARM, 88 bytes, Stack size 8 bytes, sp_info.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pb_protocol_crc
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_get_transno_lastaddr
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_sys_info
</UL>

<P><STRONG><a name="[48]"></a>sp_init_info</STRONG> (ARM, 148 bytes, Stack size 8 bytes, sp_info.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = sp_init_info &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[49]"></a>load_sys_info</STRONG> (ARM, 220 bytes, Stack size 16 bytes, sp_info.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = load_sys_info &rArr; SF_Write &rArr; FlashProgram &rArr; FlashPageProgram &rArr; IsFlashBusy &rArr; FlashReadStatusRegister &rArr; Serialize
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp (via Veneer)
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_protocol_crc
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_Write
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5a]"></a>sp_get_transno_lastaddr</STRONG> (ARM, 292 bytes, Stack size 32 bytes, sp_info.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp (via Veneer)
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_protocol_crc
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_Read
</UL>

<P><STRONG><a name="[11e]"></a>BattCheck</STRONG> (ARM, 56 bytes, Stack size 0 bytes, board.o(.text), UNUSED)

<P><STRONG><a name="[5b]"></a>DelayNS</STRONG> (ARM, 44 bytes, Stack size 0 bytes, board.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdInit
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOControlMode
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep
</UL>

<P><STRONG><a name="[46]"></a>Beep</STRONG> (ARM, 80 bytes, Stack size 8 bytes, board.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Beep
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayNS
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[45]"></a>InitBoard</STRONG> (ARM, 268 bytes, Stack size 16 bytes, board.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = InitBoard &rArr; IOControlMode &rArr; I2C_WriteByte &rArr; I2C_WriteBus &rArr; I2C_CheckACK
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__InitTimer
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRTCType
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLcdType
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLcdContrast
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_Init
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCKEYInit
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCInit
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdInit
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Printer
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimer
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOControlMode
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cb]"></a>BeeperCtr</STRONG> (ARM, 124 bytes, Stack size 0 bytes, board.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Timer0
</UL>

<P><STRONG><a name="[44]"></a>StartComm</STRONG> (ARM, 184 bytes, Stack size 16 bytes, comm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = StartComm &rArr; UART_Init &rArr; UART1_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitCom
</UL>

<P><STRONG><a name="[42]"></a>COM_SendBuf</STRONG> (ARM, 352 bytes, Stack size 16 bytes, comm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = COM_SendBuf &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveData
</UL>

<P><STRONG><a name="[14]"></a>SCKEYInit</STRONG> (ARM, 204 bytes, Stack size 8 bytes, hd7279a.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SCKEYInit
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitBoard
</UL>
<BR>[Address Reference Count : 1]<UL><LI> board.o(.text)
</UL>
<P><STRONG><a name="[13]"></a>GetSCKEY</STRONG> (ARM, 432 bytes, Stack size 0 bytes, hd7279a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> board.o(.text)
</UL>
<P><STRONG><a name="[11f]"></a>GetS2KEY</STRONG> (ARM, 440 bytes, Stack size 0 bytes, hd7279a.o(.text), UNUSED)

<P><STRONG><a name="[70]"></a>LedCLS</STRONG> (ARM, 268 bytes, Stack size 24 bytes, hd7279a.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free (via Veneer)
</UL>

<P><STRONG><a name="[120]"></a>LedInit</STRONG> (ARM, 68 bytes, Stack size 0 bytes, hd7279a.o(.text), UNUSED)

<P><STRONG><a name="[121]"></a>SelectModeLed</STRONG> (ARM, 12 bytes, Stack size 0 bytes, hd7279a.o(.text), UNUSED)

<P><STRONG><a name="[74]"></a>ChangeCode</STRONG> (ARM, 336 bytes, Stack size 4 bytes, hd7279a.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedPrint
</UL>

<P><STRONG><a name="[73]"></a>LedPrint</STRONG> (ARM, 688 bytes, Stack size 144 bytes, hd7279a.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen (via Veneer)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy (via Veneer)
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free (via Veneer)
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc (via Veneer)
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeCode
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Send
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__SetSoftTimer
</UL>

<P><STRONG><a name="[64]"></a>SetLcdType</STRONG> (ARM, 12 bytes, Stack size 0 bytes, lcd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitBoard
</UL>

<P><STRONG><a name="[122]"></a>GetLcdType</STRONG> (ARM, 12 bytes, Stack size 0 bytes, lcd.o(.text), UNUSED)

<P><STRONG><a name="[65]"></a>SetLcdContrast</STRONG> (ARM, 12 bytes, Stack size 0 bytes, lcd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitBoard
</UL>

<P><STRONG><a name="[1f]"></a>DispayMessage</STRONG> (ARM, 440 bytes, Stack size 32 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DispayMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hd7279a.o(.text)
</UL>
<P><STRONG><a name="[17]"></a>LcdCLS</STRONG> (ARM, 204 bytes, Stack size 40 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = LcdCLS &rArr; SetColumn &rArr; WriteDataOrCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetColumn
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPage
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDataOrCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_disp_menu_set
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_disp_menu_main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> board.o(.text)
</UL>
<P><STRONG><a name="[15]"></a>LcdPrint</STRONG> (ARM, 224 bytes, Stack size 32 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = LcdPrint &rArr; Lcd_DisplayFont &rArr; SF_Read &rArr; FlashFastRead &rArr; Serialize
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_DisplayFont
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_DisplayASC
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_disp_menu_set
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_disp_menu_main
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_disp_press_key
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_disp_test
</UL>
<BR>[Address Reference Count : 1]<UL><LI> board.o(.text)
</UL>
<P><STRONG><a name="[16]"></a>LcdInit</STRONG> (ARM, 504 bytes, Stack size 8 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LcdInit &rArr; FunctionSet &rArr; WriteDataOrCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayOff
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayOn
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunctionSet
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDataOrCmd
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DelayN20ns
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayNS
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitBoard
</UL>
<BR>[Address Reference Count : 1]<UL><LI> board.o(.text)
</UL>
<P><STRONG><a name="[82]"></a>SPI_SendByte</STRONG> (ARM, 124 bytes, Stack size 0 bytes, mifare.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_WriteFIFO
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_FIFO
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_ReadReg
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_WriteReg
</UL>

<P><STRONG><a name="[81]"></a>RF_WriteReg</STRONG> (ARM, 72 bytes, Stack size 12 bytes, mifare.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RF_WriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_RATS
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIF_Value
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIF_Transfer
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M500PiccAuthKey
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIF_WriteBlock
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIF_ReadBlock
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Authentication
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_Card
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AntiColl
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_BitFraming
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Request
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIF_Halt
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_Send
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_FIFO
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_FM1715
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM1715_Bus_Sel
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Reader_TimeOut
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Deselect_A
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CpuCard_Apdu
</UL>

<P><STRONG><a name="[84]"></a>SPI_ReadByte</STRONG> (ARM, 108 bytes, Stack size 0 bytes, mifare.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_FIFO
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_ReadReg
</UL>

<P><STRONG><a name="[83]"></a>RF_ReadReg</STRONG> (ARM, 76 bytes, Stack size 12 bytes, mifare.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RF_ReadReg
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ReadByte
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_RATS
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIF_Value
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIF_Transfer
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M500PiccAuthKey
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M500PiccAuthState
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIF_WriteBlock
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIF_ReadBlock
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Authentication
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_Card
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AntiColl
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Request
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIF_Halt
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_Send
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_FIFO
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_FIFO
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_FM1715
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM1715_Bus_Sel
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CpuCard_Apdu
</UL>

<P><STRONG><a name="[85]"></a>FM1715_Bus_Sel</STRONG> (ARM, 88 bytes, Stack size 8 bytes, mifare.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FM1715_Bus_Sel &rArr; RF_ReadReg
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_ReadReg
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_FM1715
</UL>

<P><STRONG><a name="[86]"></a>Init_FM1715</STRONG> (ARM, 216 bytes, Stack size 12 bytes, mifare.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Init_FM1715 &rArr; FM1715_Bus_Sel &rArr; RF_ReadReg
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM1715_Bus_Sel
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_ReadReg
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitICReader
</UL>

<P><STRONG><a name="[18]"></a>InitICReader</STRONG> (ARM, 52 bytes, Stack size 4 bytes, mifare.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = InitICReader &rArr; Init_FM1715 &rArr; FM1715_Bus_Sel &rArr; RF_ReadReg
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_FM1715
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_RATS
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CpuCard_Apdu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> board.o(.text)
</UL>
<P><STRONG><a name="[87]"></a>Read_FIFO</STRONG> (ARM, 176 bytes, Stack size 88 bytes, mifare.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = Read_FIFO &rArr; RF_ReadReg
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_ReadReg
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ReadByte
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIF_Value
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIF_Transfer
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIF_WriteBlock
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIF_ReadBlock
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Request
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_Send
</UL>

<P><STRONG><a name="[88]"></a>RF_WriteFIFO</STRONG> (ARM, 92 bytes, Stack size 20 bytes, mifare.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RF_WriteFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_Send
</UL>

<P><STRONG><a name="[89]"></a>Clear_FIFO</STRONG> (ARM, 92 bytes, Stack size 12 bytes, mifare.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Clear_FIFO &rArr; RF_ReadReg
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_ReadReg
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_Send
</UL>

<P><STRONG><a name="[4e]"></a>Reset_Reader_TimeOut</STRONG> (ARM, 48 bytes, Stack size 4 bytes, mifare.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Reset_Reader_TimeOut &rArr; RF_WriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8a]"></a>Command_Send</STRONG> (ARM, 352 bytes, Stack size 288 bytes, mifare.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = Command_Send &rArr; Read_FIFO &rArr; RF_ReadReg
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_FIFO
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_WriteFIFO
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_FIFO
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_ReadReg
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_RATS
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIF_Value
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIF_Transfer
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M500PiccAuthKey
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M500PiccAuthState
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIF_WriteBlock
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIF_ReadBlock
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Authentication
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_Card
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AntiColl
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Request
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIF_Halt
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Deselect_A
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CpuCard_Apdu
</UL>

<P><STRONG><a name="[8d]"></a>Judge_Req</STRONG> (ARM, 12 bytes, Stack size 0 bytes, mifare.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Request
</UL>

<P><STRONG><a name="[8b]"></a>MIF_Halt</STRONG> (ARM, 176 bytes, Stack size 16 bytes, mifare.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_Send
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_ReadReg
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_WriteReg
</UL>

<P><STRONG><a name="[8c]"></a>Request</STRONG> (ARM, 192 bytes, Stack size 16 bytes, mifare.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = Request &rArr; Command_Send &rArr; Read_FIFO &rArr; RF_ReadReg
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_Req
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_Send
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_FIFO
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_ReadReg
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HL_Active
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadICCardUID
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetCard_A
</UL>

<P><STRONG><a name="[8e]"></a>Set_BitFraming</STRONG> (ARM, 520 bytes, Stack size 12 bytes, mifare.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Set_BitFraming &rArr; RF_WriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AntiColl
</UL>

<P><STRONG><a name="[91]"></a>Check_UID</STRONG> (ARM, 64 bytes, Stack size 0 bytes, mifare.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AntiColl
</UL>

<P><STRONG><a name="[90]"></a>Save_UID</STRONG> (ARM, 364 bytes, Stack size 16 bytes, mifare.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Save_UID
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AntiColl
</UL>

<P><STRONG><a name="[8f]"></a>AntiColl</STRONG> (ARM, 420 bytes, Stack size 24 bytes, mifare.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = AntiColl &rArr; Command_Send &rArr; Read_FIFO &rArr; RF_ReadReg
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_UID
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_UID
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_BitFraming
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_Send
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_ReadReg
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HL_Active
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadICCardUID
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetCard_A
</UL>

<P><STRONG><a name="[92]"></a>Select_Card</STRONG> (ARM, 272 bytes, Stack size 16 bytes, mifare.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = Select_Card &rArr; Command_Send &rArr; Read_FIFO &rArr; RF_ReadReg
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_Send
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_ReadReg
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HL_Active
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetCard_A
</UL>

<P><STRONG><a name="[19]"></a>ReadICCardUID</STRONG> (ARM, 140 bytes, Stack size 16 bytes, mifare.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = ReadICCardUID &rArr; AntiColl &rArr; Command_Send &rArr; Read_FIFO &rArr; RF_ReadReg
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AntiColl
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Request
</UL>
<BR>[Address Reference Count : 1]<UL><LI> board.o(.text)
</UL>
<P><STRONG><a name="[93]"></a>Authentication</STRONG> (ARM, 444 bytes, Stack size 32 bytes, mifare.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_Send
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_ReadReg
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_WriteReg
</UL>

<P><STRONG><a name="[94]"></a>MIF_ReadBlock</STRONG> (ARM, 252 bytes, Stack size 16 bytes, mifare.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_Send
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_FIFO
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_ReadReg
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIF_ReadCard3
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIF_ReadCard2
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIF_ReadCard
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIF_ReadCards
</UL>

<P><STRONG><a name="[95]"></a>MIF_WriteBlock</STRONG> (ARM, 384 bytes, Stack size 24 bytes, mifare.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_Send
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_FIFO
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_ReadReg
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIF_WriteCards
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIF_WriteCard
</UL>

<P><STRONG><a name="[96]"></a>M500PiccAuthState</STRONG> (ARM, 200 bytes, Stack size 24 bytes, mifare.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_Send
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M500PiccAuthKey
</UL>

<P><STRONG><a name="[97]"></a>M500PiccAuthKey</STRONG> (ARM, 144 bytes, Stack size 32 bytes, mifare.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M500PiccAuthState
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_Send
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_ReadReg
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M500PiccAuthOK
</UL>

<P><STRONG><a name="[99]"></a>M500HostCodeKey</STRONG> (ARM, 96 bytes, Stack size 8 bytes, mifare.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M500PiccAuthOK
</UL>

<P><STRONG><a name="[98]"></a>M500PiccAuthOK</STRONG> (ARM, 108 bytes, Stack size 32 bytes, mifare.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M500HostCodeKey
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M500PiccAuthKey
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HL_Active
</UL>

<P><STRONG><a name="[9a]"></a>HL_Active</STRONG> (ARM, 180 bytes, Stack size 24 bytes, mifare.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M500PiccAuthOK
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_Card
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AntiColl
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Request
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIF_Purse
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIF_WriteCards
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIF_WriteCard
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIF_ReadCard3
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIF_ReadCard2
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIF_ReadCard
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIF_ReadCards
</UL>

<P><STRONG><a name="[9b]"></a>MIF_ReadCards</STRONG> (ARM, 300 bytes, Stack size 40 bytes, mifare.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HL_Active
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIF_ReadBlock
</UL>

<P><STRONG><a name="[9c]"></a>MIF_ReadCard</STRONG> (ARM, 136 bytes, Stack size 32 bytes, mifare.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HL_Active
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIF_ReadBlock
</UL>

<P><STRONG><a name="[9d]"></a>MIF_ReadCard2</STRONG> (ARM, 160 bytes, Stack size 32 bytes, mifare.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HL_Active
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIF_ReadBlock
</UL>

<P><STRONG><a name="[9e]"></a>MIF_ReadCard3</STRONG> (ARM, 184 bytes, Stack size 32 bytes, mifare.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HL_Active
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIF_ReadBlock
</UL>

<P><STRONG><a name="[9f]"></a>MIF_WriteCard</STRONG> (ARM, 136 bytes, Stack size 32 bytes, mifare.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HL_Active
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIF_WriteBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIF_InitPurse
</UL>

<P><STRONG><a name="[a0]"></a>MIF_WriteCards</STRONG> (ARM, 288 bytes, Stack size 40 bytes, mifare.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HL_Active
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIF_WriteBlock
</UL>

<P><STRONG><a name="[a1]"></a>MIF_InitPurse</STRONG> (ARM, 196 bytes, Stack size 24 bytes, mifare.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIF_WriteCard
</UL>

<P><STRONG><a name="[a2]"></a>MIF_Transfer</STRONG> (ARM, 272 bytes, Stack size 16 bytes, mifare.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_Send
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_FIFO
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_ReadReg
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIF_Value
</UL>

<P><STRONG><a name="[a3]"></a>MIF_Value</STRONG> (ARM, 344 bytes, Stack size 24 bytes, mifare.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIF_Transfer
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_Send
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_FIFO
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_ReadReg
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIF_Purse
</UL>

<P><STRONG><a name="[a4]"></a>MIF_Purse</STRONG> (ARM, 168 bytes, Stack size 32 bytes, mifare.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIF_Value
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HL_Active
</UL>

<P><STRONG><a name="[a5]"></a>CPU_RATS</STRONG> (ARM, 800 bytes, Stack size 104 bytes, mifare.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 492<LI>Call Chain = CPU_RATS &rArr; Command_Send &rArr; Read_FIFO &rArr; RF_ReadReg
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_Send
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_ReadReg
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_WriteReg
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitICReader
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetCard_A
</UL>

<P><STRONG><a name="[4c]"></a>CpuCard_Apdu</STRONG> (ARM, 2652 bytes, Stack size 912 bytes, mifare.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1300<LI>Call Chain = CpuCard_Apdu &rArr; Command_Send &rArr; Read_FIFO &rArr; RF_ReadReg
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_Send
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_ReadReg
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_WriteReg
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memxcpy
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitICReader
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4b]"></a>ResetCard_A</STRONG> (ARM, 140 bytes, Stack size 80 bytes, mifare.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 572<LI>Call Chain = ResetCard_A &rArr; CPU_RATS &rArr; Command_Send &rArr; Read_FIFO &rArr; RF_ReadReg
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_RATS
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_Card
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AntiColl
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Request
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4d]"></a>Deselect_A</STRONG> (ARM, 100 bytes, Stack size 8 bytes, mifare.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = Deselect_A &rArr; Command_Send &rArr; Read_FIFO &rArr; RF_ReadReg
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_Send
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[60]"></a>SetRTCType</STRONG> (ARM, 12 bytes, Stack size 0 bytes, rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitBoard
</UL>

<P><STRONG><a name="[123]"></a>InitWatchDog</STRONG> (ARM, 76 bytes, Stack size 0 bytes, rtc.o(.text), UNUSED)

<P><STRONG><a name="[124]"></a>IntiAlarmTimer</STRONG> (ARM, 108 bytes, Stack size 0 bytes, rtc.o(.text), UNUSED)

<P><STRONG><a name="[125]"></a>SetAlarmTime</STRONG> (ARM, 180 bytes, Stack size 0 bytes, rtc.o(.text), UNUSED)

<P><STRONG><a name="[a7]"></a>CheckAlarmTimeAndReset</STRONG> (ARM, 76 bytes, Stack size 16 bytes, rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset
</UL>

<P><STRONG><a name="[61]"></a>RTCInit</STRONG> (ARM, 76 bytes, Stack size 0 bytes, rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitBoard
</UL>

<P><STRONG><a name="[47]"></a>GetTime</STRONG> (ARM, 576 bytes, Stack size 40 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = GetTime &rArr; I2C_ReadByte &rArr; I2C_WriteBus &rArr; I2C_CheckACK
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTick
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a9]"></a>SetTime</STRONG> (ARM, 608 bytes, Stack size 32 bytes, rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteByte
</UL>

<P><STRONG><a name="[ab]"></a>GetTick</STRONG> (ARM, 64 bytes, Stack size 16 bytes, rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTime
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTickCount
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPause
</UL>

<P><STRONG><a name="[ac]"></a>GetPause</STRONG> (ARM, 48 bytes, Stack size 16 bytes, rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTick
</UL>

<P><STRONG><a name="[ad]"></a>GetTickCount</STRONG> (ARM, 32 bytes, Stack size 8 bytes, rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTick
</UL>

<P><STRONG><a name="[bc]"></a>FlashTimeOut</STRONG> (ARM, 84 bytes, Stack size 0 bytes, m25pe16.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashBulkErase
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashSectorErase
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashPageErase
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashPageProgram
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashPageWrite
</UL>

<P><STRONG><a name="[5f]"></a>SF_Init</STRONG> (ARM, 16 bytes, Stack size 8 bytes, m25pe16.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SF_Init &rArr; FL_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitBoard
</UL>

<P><STRONG><a name="[b1]"></a>ConfigureSpiMaster</STRONG> (ARM, 76 bytes, Stack size 0 bytes, m25pe16.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serialize
</UL>

<P><STRONG><a name="[b2]"></a>FlashWriteEnable</STRONG> (ARM, 56 bytes, Stack size 16 bytes, m25pe16.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = FlashWriteEnable &rArr; Serialize
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serialize
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteLockRegister
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashBulkErase
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashSectorErase
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashPageErase
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashPageProgram
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashPageWrite
</UL>

<P><STRONG><a name="[b3]"></a>FlashWriteDisable</STRONG> (ARM, 56 bytes, Stack size 16 bytes, m25pe16.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serialize
</UL>

<P><STRONG><a name="[b4]"></a>FlashReadDeviceIdentification</STRONG> (ARM, 156 bytes, Stack size 32 bytes, m25pe16.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serialize
</UL>

<P><STRONG><a name="[b5]"></a>FlashReadManufacturerIdentification</STRONG> (ARM, 112 bytes, Stack size 32 bytes, m25pe16.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serialize
</UL>

<P><STRONG><a name="[b6]"></a>FlashReadStatusRegister</STRONG> (ARM, 92 bytes, Stack size 32 bytes, m25pe16.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = FlashReadStatusRegister &rArr; Serialize
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serialize
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsFlashBusy
</UL>

<P><STRONG><a name="[b7]"></a>IsFlashBusy</STRONG> (ARM, 44 bytes, Stack size 8 bytes, m25pe16.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = IsFlashBusy &rArr; FlashReadStatusRegister &rArr; Serialize
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashReadStatusRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteLockRegister
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashDeepPowerDown
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashBulkErase
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashSectorErase
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashPageErase
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashPageProgram
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashPageWrite
</UL>

<P><STRONG><a name="[b8]"></a>FlashRead</STRONG> (ARM, 132 bytes, Stack size 40 bytes, m25pe16.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serialize
</UL>

<P><STRONG><a name="[b9]"></a>FlashFastRead</STRONG> (ARM, 136 bytes, Stack size 40 bytes, m25pe16.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = FlashFastRead &rArr; Serialize
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serialize
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_Read
</UL>

<P><STRONG><a name="[ba]"></a>SF_ReadContinuous</STRONG> (ARM, 136 bytes, Stack size 40 bytes, m25pe16.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serialize
</UL>

<P><STRONG><a name="[bb]"></a>FlashPageWrite</STRONG> (ARM, 220 bytes, Stack size 32 bytes, m25pe16.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = FlashPageWrite &rArr; IsFlashBusy &rArr; FlashReadStatusRegister &rArr; Serialize
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsFlashBusy
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteEnable
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashTimeOut
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serialize
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWrite
</UL>

<P><STRONG><a name="[bd]"></a>FlashPageProgram</STRONG> (ARM, 220 bytes, Stack size 32 bytes, m25pe16.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = FlashPageProgram &rArr; IsFlashBusy &rArr; FlashReadStatusRegister &rArr; Serialize
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsFlashBusy
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteEnable
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashTimeOut
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serialize
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashProgram
</UL>

<P><STRONG><a name="[be]"></a>FlashPageErase</STRONG> (ARM, 176 bytes, Stack size 24 bytes, m25pe16.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsFlashBusy
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteEnable
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashTimeOut
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serialize
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_ErasePage
</UL>

<P><STRONG><a name="[bf]"></a>FlashSectorErase</STRONG> (ARM, 172 bytes, Stack size 24 bytes, m25pe16.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsFlashBusy
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteEnable
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashTimeOut
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serialize
</UL>

<P><STRONG><a name="[c0]"></a>FlashBulkErase</STRONG> (ARM, 136 bytes, Stack size 16 bytes, m25pe16.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsFlashBusy
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteEnable
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashTimeOut
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serialize
</UL>

<P><STRONG><a name="[c1]"></a>FlashDeepPowerDown</STRONG> (ARM, 76 bytes, Stack size 16 bytes, m25pe16.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsFlashBusy
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serialize
</UL>

<P><STRONG><a name="[c2]"></a>FlashReleaseFromDeepPowerDown</STRONG> (ARM, 56 bytes, Stack size 16 bytes, m25pe16.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serialize
</UL>

<P><STRONG><a name="[c3]"></a>FlashWrite</STRONG> (ARM, 180 bytes, Stack size 32 bytes, m25pe16.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = FlashWrite &rArr; FlashPageWrite &rArr; IsFlashBusy &rArr; FlashReadStatusRegister &rArr; Serialize
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashPageWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_Write
</UL>

<P><STRONG><a name="[c4]"></a>FlashProgram</STRONG> (ARM, 180 bytes, Stack size 32 bytes, m25pe16.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = FlashProgram &rArr; FlashPageProgram &rArr; IsFlashBusy &rArr; FlashReadStatusRegister &rArr; Serialize
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashPageProgram
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_Write
</UL>

<P><STRONG><a name="[c5]"></a>FlashReadLockRegister</STRONG> (ARM, 128 bytes, Stack size 32 bytes, m25pe16.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serialize
</UL>

<P><STRONG><a name="[c6]"></a>FlashWriteLockRegister</STRONG> (ARM, 140 bytes, Stack size 32 bytes, m25pe16.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsFlashBusy
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteEnable
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serialize
</UL>

<P><STRONG><a name="[55]"></a>SF_Read</STRONG> (ARM, 68 bytes, Stack size 24 bytes, m25pe16.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = SF_Read &rArr; FlashFastRead &rArr; Serialize
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashFastRead
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_DisplayFont
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_DisplayASC
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_get_transno_lastaddr
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_sys_info
</UL>

<P><STRONG><a name="[59]"></a>SF_Write</STRONG> (ARM, 112 bytes, Stack size 32 bytes, m25pe16.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = SF_Write &rArr; FlashProgram &rArr; FlashPageProgram &rArr; IsFlashBusy &rArr; FlashReadStatusRegister &rArr; Serialize
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashProgram
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_sys_info
</UL>

<P><STRONG><a name="[c7]"></a>SF_ErasePage</STRONG> (ARM, 44 bytes, Stack size 8 bytes, m25pe16.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashPageErase
</UL>

<P><STRONG><a name="[ca]"></a>PrintString</STRONG> (ARM, 76 bytes, Stack size 16 bytes, printer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PrintString &rArr; PT_SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT_SendChar
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayEtu
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Printer
</UL>

<P><STRONG><a name="[5c]"></a>Init_Printer</STRONG> (ARM, 80 bytes, Stack size 8 bytes, printer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Init_Printer &rArr; PrintString &rArr; PT_SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintString
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitBoard
</UL>

<P><STRONG><a name="[63]"></a>__InitTimer</STRONG> (ARM, 140 bytes, Stack size 8 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __InitTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitBoard
</UL>

<P><STRONG><a name="[62]"></a>InitTimer</STRONG> (ARM, 100 bytes, Stack size 8 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = InitTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitBoard
</UL>

<P><STRONG><a name="[126]"></a>SetTimer</STRONG> (ARM, 160 bytes, Stack size 12 bytes, timer.o(.text), UNUSED)

<P><STRONG><a name="[127]"></a>KillTimer</STRONG> (ARM, 136 bytes, Stack size 0 bytes, timer.o(.text), UNUSED)

<P><STRONG><a name="[128]"></a>__SetTimer</STRONG> (ARM, 116 bytes, Stack size 8 bytes, timer.o(.text), UNUSED)

<P><STRONG><a name="[129]"></a>__KillTimer</STRONG> (ARM, 88 bytes, Stack size 0 bytes, timer.o(.text), UNUSED)

<P><STRONG><a name="[67]"></a>__SetSoftTimer</STRONG> (ARM, 112 bytes, Stack size 16 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __SetSoftTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedPrint
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_UART1
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_UART0
</UL>

<P><STRONG><a name="[66]"></a>__KillSoftTimer</STRONG> (ARM, 52 bytes, Stack size 0 bytes, timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_UART1
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_UART0
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM1_TimeoutHandle
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM0_TimeoutHandle
</UL>

<P><STRONG><a name="[5d]"></a>I2C_Init</STRONG> (ARM, 56 bytes, Stack size 8 bytes, iic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_Init &rArr; I2C_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitBoard
</UL>

<P><STRONG><a name="[a8]"></a>I2C_ReadByte</STRONG> (ARM, 184 bytes, Stack size 32 bytes, iic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = I2C_ReadByte &rArr; I2C_WriteBus &rArr; I2C_CheckACK
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadBus
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteBus
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_NOACK
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ACK
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTime
</UL>

<P><STRONG><a name="[aa]"></a>I2C_WriteByte</STRONG> (ARM, 136 bytes, Stack size 24 bytes, iic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = I2C_WriteByte &rArr; I2C_WriteBus &rArr; I2C_CheckACK
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteBus
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open_Or_Close_Lock
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open_Or_CloseBeen
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTime
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOControlMode
</UL>

<P><STRONG><a name="[5e]"></a>IOControlMode</STRONG> (ARM, 88 bytes, Stack size 16 bytes, pca9554.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = IOControlMode &rArr; I2C_WriteByte &rArr; I2C_WriteBus &rArr; I2C_CheckACK
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteByte
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayNS
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitBoard
</UL>

<P><STRONG><a name="[d4]"></a>Open_Or_CloseBeen</STRONG> (ARM, 100 bytes, Stack size 16 bytes, pca9554.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteByte
</UL>

<P><STRONG><a name="[d5]"></a>Open_Or_Close_Lock</STRONG> (ARM, 176 bytes, Stack size 16 bytes, pca9554.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteByte
</UL>

<P><STRONG><a name="[12a]"></a>IRQ_Exception</STRONG> (ARM, 8 bytes, Stack size 0 bytes, target.o(.text), UNUSED)

<P><STRONG><a name="[28]"></a>FIQ_Exception</STRONG> (ARM, 8 bytes, Stack size 0 bytes, target.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIQ_Handler
</UL>

<P><STRONG><a name="[12b]"></a>TargetInit</STRONG> (ARM, 4 bytes, Stack size 0 bytes, target.o(.text), UNUSED)

<P><STRONG><a name="[29]"></a>TargetResetInit</STRONG> (ARM, 144 bytes, Stack size 0 bytes, target.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetInit
</UL>

<P><STRONG><a name="[12c]"></a>__rt_div0</STRONG> (ARM, 16 bytes, Stack size 0 bytes, target.o(.text), UNUSED)

<P><STRONG><a name="[12d]"></a>fputc</STRONG> (ARM, 20 bytes, Stack size 0 bytes, target.o(.text), UNUSED)

<P><STRONG><a name="[12e]"></a>fgetc</STRONG> (ARM, 16 bytes, Stack size 0 bytes, target.o(.text), UNUSED)

<P><STRONG><a name="[12f]"></a>_sys_close</STRONG> (ARM, 16 bytes, Stack size 0 bytes, target.o(.text), UNUSED)

<P><STRONG><a name="[130]"></a>_sys_write</STRONG> (ARM, 28 bytes, Stack size 0 bytes, target.o(.text), UNUSED)

<P><STRONG><a name="[131]"></a>_sys_read</STRONG> (ARM, 28 bytes, Stack size 0 bytes, target.o(.text), UNUSED)

<P><STRONG><a name="[f3]"></a>_ttywrch</STRONG> (ARM, 8 bytes, Stack size 0 bytes, target.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display (via Veneer)
</UL>

<P><STRONG><a name="[132]"></a>_sys_istty</STRONG> (ARM, 16 bytes, Stack size 0 bytes, target.o(.text), UNUSED)

<P><STRONG><a name="[133]"></a>_sys_seek</STRONG> (ARM, 16 bytes, Stack size 0 bytes, target.o(.text), UNUSED)

<P><STRONG><a name="[134]"></a>_sys_ensure</STRONG> (ARM, 16 bytes, Stack size 0 bytes, target.o(.text), UNUSED)

<P><STRONG><a name="[135]"></a>_sys_flen</STRONG> (ARM, 16 bytes, Stack size 0 bytes, target.o(.text), UNUSED)

<P><STRONG><a name="[136]"></a>_sys_tmpnam</STRONG> (ARM, 24 bytes, Stack size 0 bytes, target.o(.text), UNUSED)

<P><STRONG><a name="[3d]"></a>_sys_exit</STRONG> (ARM, 8 bytes, Stack size 0 bytes, target.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit (via Veneer)
</UL>

<P><STRONG><a name="[137]"></a>_sys_command_string</STRONG> (ARM, 20 bytes, Stack size 0 bytes, target.o(.text), UNUSED)

<P><STRONG><a name="[138]"></a>__semihosting$guard</STRONG> (ARM, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[139]"></a>__use_no_semihosting_swi</STRONG> (ARM, 4 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[6d]"></a>malloc</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, h1_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedPrint (via Veneer)
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_SendBuf (via Veneer)
</UL>

<P><STRONG><a name="[68]"></a>free</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedPrint (via Veneer)
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedCLS (via Veneer)
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_UART1 (via Veneer)
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_UART0 (via Veneer)
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>

<P><STRONG><a name="[51]"></a>__2sprintf</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, noretval__2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_disp_press_key (via Veneer)
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_disp_test (via Veneer)
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_init_info (via Veneer)
</UL>

<P><STRONG><a name="[d9]"></a>_printf_pre_padding</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r2
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[db]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r2
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[2e]"></a>_printf_int_dec</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned (Weak Reference)
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed (Weak Reference)
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_udiv10 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d (via Veneer)
</UL>

<P><STRONG><a name="[30]"></a>_printf_int_hex</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, _printf_hex_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x (via Veneer)
</UL>

<P><STRONG><a name="[13a]"></a>_printf_longlong_hex</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, _printf_hex_int.o(.text), UNUSED)

<P><STRONG><a name="[e0]"></a>__printf</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, __printf_flags_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent (via Veneer)
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r2
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r1
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[57]"></a>memcmp</STRONG> (Thumb, 118 bytes, Stack size 4 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_get_transno_lastaddr (via Veneer)
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_sys_info (via Veneer)
</UL>

<P><STRONG><a name="[76]"></a>strcpy</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, strcpy.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedPrint (via Veneer)
</UL>

<P><STRONG><a name="[75]"></a>strlen</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, strlen.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedPrint (via Veneer)
</UL>

<P><STRONG><a name="[41]"></a>__aeabi_memcpy</STRONG> (ARM, 0 bytes, Stack size 0 bytes, rt_memcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTime
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_RATS
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_Send
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_FIFO
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispayMessage
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedPrint
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadICCardUID
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTime
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CpuCard_Apdu
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_SendBuf
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveData
</UL>

<P><STRONG><a name="[e3]"></a>__rt_memcpy</STRONG> (ARM, 212 bytes, Stack size 0 bytes, rt_memcpy.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[13b]"></a>_memcpy_lastbytes</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memcpy.o(.text), UNUSED)

<P><STRONG><a name="[58]"></a>__aeabi_memcpy4</STRONG> (ARM, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_sys_info
</UL>

<P><STRONG><a name="[13c]"></a>__aeabi_memcpy8</STRONG> (ARM, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[13d]"></a>__rt_memcpy_w</STRONG> (ARM, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[13e]"></a>_memcpy_lastbytes_aligned</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[71]"></a>__aeabi_memset</STRONG> (ARM, 16 bytes, Stack size 0 bytes, aeabi_memset.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedPrint
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedCLS
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdCLS
</UL>

<P><STRONG><a name="[50]"></a>__aeabi_memclr4</STRONG> (ARM, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_FIFO
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_disp_press_key
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_disp_test
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_init_info
</UL>

<P><STRONG><a name="[13f]"></a>__aeabi_memclr8</STRONG> (ARM, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[140]"></a>__rt_memclr_w</STRONG> (ARM, 84 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[ec]"></a>_memset_w</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[141]"></a>__aeabi_idiv</STRONG> (ARM, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[3f]"></a>__aeabi_idivmod</STRONG> (ARM, 384 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTime
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteToDecStr
</UL>

<P><STRONG><a name="[d6]"></a>__rt_heap_descriptor</STRONG> (ARM, 16 bytes, Stack size 0 bytes, rt_heap_descriptor_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc (via Veneer)
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free (via Veneer)
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc (via Veneer)
</UL>

<P><STRONG><a name="[142]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[143]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[7]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[4]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[d7]"></a>__Heap_Full</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_expand
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[e7]"></a>__Heap_Broken</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[34]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor (via Veneer)
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_expand
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_escrow
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[ea]"></a>__Heap_Initialize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[3]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[df]"></a>_printf_int_common</STRONG> (Thumb, 182 bytes, Stack size 40 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r2
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[d8]"></a>_printf_char_common</STRONG> (Thumb, 34 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[23]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noretval__2sprintf.o(.text)
</UL>
<P><STRONG><a name="[144]"></a>__aeabi_memclr</STRONG> (ARM, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[eb]"></a>__rt_memclr</STRONG> (ARM, 64 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[e4]"></a>_memset</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[de]"></a>__rt_udiv10</STRONG> (ARM, 44 bytes, Stack size 0 bytes, rtudiv10.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec (via Veneer)
</UL>

<P><STRONG><a name="[145]"></a>__user_libspace</STRONG> (ARM, 12 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[ef]"></a>__user_perproc_libspace</STRONG> (ARM, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[146]"></a>__user_perthread_libspace</STRONG> (ARM, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[e6]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, h1_extend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[e8]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[e9]"></a>__rt_heap_escrow</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, heapauxa.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[e5]"></a>__rt_heap_expand</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, heapauxa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __rt_heap_expand
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[36]"></a>__user_setup_stackheap</STRONG> (ARM, 96 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[39]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit (via Veneer)
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[ee]"></a>__sig_exit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, defsig_exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __sig_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[ed]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[f2]"></a>__default_signal_display</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
</UL>

<P><STRONG><a name="[f8]"></a>__rt_fp_status_addr</STRONG> (ARM, 16 bytes, Stack size 0 bytes, rt_fp_status_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[147]"></a>__aeabi_uidiv</STRONG> (ARM, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text_udiv), UNUSED)

<P><STRONG><a name="[6a]"></a>__aeabi_uidivmod</STRONG> (ARM, 36 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text_udiv))
<BR><BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div_large
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div2
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div5
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div8
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__SetSoftTimer
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[e1]"></a>__ARM_common_call_via_r1</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, __printf.o(i.__ARM_common_call_via_r1))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[da]"></a>__ARM_common_call_via_r2</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, __printf.o(i.__ARM_common_call_via_r2))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>

<P><STRONG><a name="[32]"></a>_fp_init</STRONG> (ARM, 24 bytes, Stack size 8 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _fp_init
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_fp_status_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (via Veneer)
</UL>

<P><STRONG><a name="[148]"></a>__fplib_config_pureend_doubles</STRONG> (ARM, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[1a]"></a>COM0_TimeoutHandle</STRONG> (ARM, 80 bytes, Stack size 8 bytes, comm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = COM0_TimeoutHandle
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__KillSoftTimer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> comm.o(.text)
</UL>
<P><STRONG><a name="[1b]"></a>COM1_TimeoutHandle</STRONG> (ARM, 80 bytes, Stack size 8 bytes, comm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = COM1_TimeoutHandle
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__KillSoftTimer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> comm.o(.text)
</UL>
<P><STRONG><a name="[1c]"></a>IRQ_UART0</STRONG> (ARM, 336 bytes, Stack size 32 bytes, comm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = IRQ_UART0 &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free (via Veneer)
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__SetSoftTimer
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__KillSoftTimer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> comm.o(.text)
</UL>
<P><STRONG><a name="[1d]"></a>IRQ_UART1</STRONG> (ARM, 348 bytes, Stack size 32 bytes, comm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = IRQ_UART1 &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free (via Veneer)
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__SetSoftTimer
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__KillSoftTimer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> comm.o(.text)
</UL>
<P><STRONG><a name="[6b]"></a>UART0_Init</STRONG> (ARM, 108 bytes, Stack size 8 bytes, comm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART0_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[6c]"></a>UART1_Init</STRONG> (ARM, 140 bytes, Stack size 8 bytes, comm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART1_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[69]"></a>UART_Init</STRONG> (ARM, 376 bytes, Stack size 24 bytes, comm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = UART_Init &rArr; UART1_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Init
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartComm
</UL>

<P><STRONG><a name="[6f]"></a>Delay8us_7279</STRONG> (ARM, 28 bytes, Stack size 0 bytes, hd7279a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Send
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Eint3
</UL>

<P><STRONG><a name="[6e]"></a>Delay50us_7279</STRONG> (ARM, 28 bytes, Stack size 0 bytes, hd7279a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Send
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Eint3
</UL>

<P><STRONG><a name="[1e]"></a>IRQ_Eint3</STRONG> (ARM, 324 bytes, Stack size 32 bytes, hd7279a.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IRQ_Eint3
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay50us_7279
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay8us_7279
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hd7279a.o(.text)
</UL>
<P><STRONG><a name="[72]"></a>Data_Send</STRONG> (ARM, 208 bytes, Stack size 24 bytes, hd7279a.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay50us_7279
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay8us_7279
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedPrint
</UL>

<P><STRONG><a name="[78]"></a>LCD_DelayN20ns</STRONG> (ARM, 24 bytes, Stack size 0 bytes, lcd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDataOrCmd
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdInit
</UL>

<P><STRONG><a name="[77]"></a>WriteDataOrCmd</STRONG> (ARM, 652 bytes, Stack size 24 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = WriteDataOrCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DelayN20ns
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRAM_N_Column
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetColumn
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPage
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayOff
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayOn
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunctionSet
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdInit
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdCLS
</UL>

<P><STRONG><a name="[79]"></a>FunctionSet</STRONG> (ARM, 60 bytes, Stack size 16 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FunctionSet &rArr; WriteDataOrCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDataOrCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdInit
</UL>

<P><STRONG><a name="[7a]"></a>DisplayOn</STRONG> (ARM, 24 bytes, Stack size 8 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DisplayOn &rArr; WriteDataOrCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDataOrCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdInit
</UL>

<P><STRONG><a name="[7b]"></a>DisplayOff</STRONG> (ARM, 24 bytes, Stack size 8 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DisplayOff &rArr; WriteDataOrCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDataOrCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdInit
</UL>

<P><STRONG><a name="[7c]"></a>SetPage</STRONG> (ARM, 28 bytes, Stack size 8 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SetPage &rArr; WriteDataOrCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDataOrCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRAM_N_Column
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdCLS
</UL>

<P><STRONG><a name="[7d]"></a>SetColumn</STRONG> (ARM, 48 bytes, Stack size 8 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SetColumn &rArr; WriteDataOrCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDataOrCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRAM_N_Column
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdCLS
</UL>

<P><STRONG><a name="[7e]"></a>WriteRAM_N_Column</STRONG> (ARM, 108 bytes, Stack size 32 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = WriteRAM_N_Column &rArr; SetColumn &rArr; WriteDataOrCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetColumn
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPage
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDataOrCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_DisplayFont
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_DisplayASC
</UL>

<P><STRONG><a name="[7f]"></a>Lcd_DisplayASC</STRONG> (ARM, 144 bytes, Stack size 56 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = Lcd_DisplayASC &rArr; SF_Read &rArr; FlashFastRead &rArr; Serialize
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRAM_N_Column
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdPrint
</UL>

<P><STRONG><a name="[80]"></a>Lcd_DisplayFont</STRONG> (ARM, 156 bytes, Stack size 64 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = Lcd_DisplayFont &rArr; SF_Read &rArr; FlashFastRead &rArr; Serialize
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRAM_N_Column
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdPrint
</UL>

<P><STRONG><a name="[a6]"></a>memxcpy</STRONG> (ARM, 48 bytes, Stack size 0 bytes, mifare.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CpuCard_Apdu
</UL>

<P><STRONG><a name="[af]"></a>SF_Delay</STRONG> (ARM, 28 bytes, Stack size 0 bytes, m25pe16.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_Init
</UL>

<P><STRONG><a name="[ae]"></a>FL_Init</STRONG> (ARM, 160 bytes, Stack size 8 bytes, m25pe16.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FL_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_Init
</UL>

<P><STRONG><a name="[b0]"></a>Serialize</STRONG> (ARM, 184 bytes, Stack size 28 bytes, m25pe16.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Serialize
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureSpiMaster
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteLockRegister
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashReadLockRegister
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashReleaseFromDeepPowerDown
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashDeepPowerDown
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashBulkErase
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashSectorErase
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashPageErase
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashPageProgram
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashPageWrite
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_ReadContinuous
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashFastRead
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashRead
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashReadStatusRegister
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashReadManufacturerIdentification
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashReadDeviceIdentification
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteDisable
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteEnable
</UL>

<P><STRONG><a name="[c9]"></a>DelayEtu</STRONG> (ARM, 24 bytes, Stack size 0 bytes, printer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintString
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT_SendChar
</UL>

<P><STRONG><a name="[c8]"></a>PT_SendChar</STRONG> (ARM, 112 bytes, Stack size 16 bytes, printer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PT_SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayEtu
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintString
</UL>

<P><STRONG><a name="[21]"></a>IRQ_Timer0</STRONG> (ARM, 488 bytes, Stack size 32 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IRQ_Timer0
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BeeperCtr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer.o(.text)
</UL>
<P><STRONG><a name="[22]"></a>IRQ_Timer1</STRONG> (ARM, 532 bytes, Stack size 24 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IRQ_Timer1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer.o(.text)
</UL>
<P><STRONG><a name="[cd]"></a>I2C_DelayNs</STRONG> (ARM, 24 bytes, Stack size 0 bytes, iic.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadBus
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteBus
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_CheckACK
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_NOACK
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ACK
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
</UL>

<P><STRONG><a name="[cc]"></a>I2C_Start</STRONG> (ARM, 92 bytes, Stack size 8 bytes, iic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DelayNs
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteByte
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadByte
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
</UL>

<P><STRONG><a name="[ce]"></a>I2C_Stop</STRONG> (ARM, 72 bytes, Stack size 8 bytes, iic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DelayNs
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteByte
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadByte
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
</UL>

<P><STRONG><a name="[cf]"></a>I2C_ACK</STRONG> (ARM, 72 bytes, Stack size 8 bytes, iic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_ACK
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DelayNs
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadByte
</UL>

<P><STRONG><a name="[d0]"></a>I2C_NOACK</STRONG> (ARM, 72 bytes, Stack size 8 bytes, iic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_NOACK
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DelayNs
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadByte
</UL>

<P><STRONG><a name="[d1]"></a>I2C_CheckACK</STRONG> (ARM, 148 bytes, Stack size 8 bytes, iic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_CheckACK
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DelayNs
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteBus
</UL>

<P><STRONG><a name="[d2]"></a>I2C_WriteBus</STRONG> (ARM, 144 bytes, Stack size 16 bytes, iic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_WriteBus &rArr; I2C_CheckACK
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_CheckACK
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DelayNs
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteByte
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadByte
</UL>

<P><STRONG><a name="[d3]"></a>I2C_ReadBus</STRONG> (ARM, 188 bytes, Stack size 16 bytes, iic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_ReadBus
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DelayNs
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadByte
</UL>

<P><STRONG><a name="[a]"></a>Undefined</STRONG> (ARM, 0 bytes, Stack size unknown bytes, Startup.o(vectors))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Undefined
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Undefined
</UL>
<BR>[Address Reference Count : 1]<UL><LI> Startup.o(vectors)
</UL>
<P><STRONG><a name="[b]"></a>SoftwareInterrupt</STRONG> (ARM, 0 bytes, Stack size unknown bytes, Startup.o(vectors))
<BR>[Address Reference Count : 1]<UL><LI> Startup.o(vectors)
</UL>
<P><STRONG><a name="[e]"></a>IRQDisable</STRONG> (ARM, 0 bytes, Stack size unknown bytes, Startup.o(vectors))
<BR>[Address Reference Count : 1]<UL><LI> Startup.o(vectors)
</UL>
<P><STRONG><a name="[f]"></a>IRQEnable</STRONG> (ARM, 0 bytes, Stack size unknown bytes, Startup.o(vectors))
<BR>[Address Reference Count : 1]<UL><LI> Startup.o(vectors)
</UL>
<P><STRONG><a name="[10]"></a>FIQDisable</STRONG> (ARM, 0 bytes, Stack size unknown bytes, Startup.o(vectors))
<BR>[Address Reference Count : 1]<UL><LI> Startup.o(vectors)
</UL>
<P><STRONG><a name="[11]"></a>FIQEnable</STRONG> (ARM, 0 bytes, Stack size unknown bytes, Startup.o(vectors))
<BR>[Address Reference Count : 1]<UL><LI> Startup.o(vectors)
</UL>
<P><STRONG><a name="[c]"></a>PrefetchAbort</STRONG> (ARM, 0 bytes, Stack size unknown bytes, Startup.o(vectors))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrefetchAbort
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrefetchAbort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> Startup.o(vectors)
</UL>
<P><STRONG><a name="[d]"></a>FIQ_Handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, Startup.o(vectors))
<BR><BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIQ_Exception
</UL>
<BR>[Address Reference Count : 1]<UL><LI> Startup.o(vectors)
</UL>
<P><STRONG><a name="[f6]"></a>__arm_div8</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[f5]"></a>__arm_div5</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[f4]"></a>__arm_div2</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[f7]"></a>__arm_div_large</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[24]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[f0]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[dc]"></a>_printf_truncate_signed</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[dd]"></a>_printf_truncate_unsigned</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>
<HR></body></html>
