<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [..\obj\test.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image ..\obj\test.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 4.1 [Build 481]: Last Updated: Fri Sep 19 10:58:46 2014
<BR><P>
<H3>Maximum Stack Usage =       4028 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
do_menu_showinfo &rArr; sp_disp_flash &rArr; sp_wait_for_retkey &rArr; do_wait_for_retkey &rArr; LcdPrint &rArr; Lcd_DisplayFont &rArr; SF_Read &rArr; FlashFastRead &rArr; Serialize
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[2f]">Reset</a>
 <LI><a href="#[a]">ResetInit</a>
 <LI><a href="#[31]">__user_initial_stackheap</a>
 <LI><a href="#[b]">Undefined</a>
 <LI><a href="#[c]">SoftwareInterrupt</a>
 <LI><a href="#[f]">IRQDisable</a>
 <LI><a href="#[10]">IRQEnable</a>
 <LI><a href="#[11]">FIQDisable</a>
 <LI><a href="#[12]">FIQEnable</a>
 <LI><a href="#[d]">PrefetchAbort</a>
 <LI><a href="#[e]">FIQ_Handler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[b]">Undefined</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">Undefined</a><BR>
 <LI><a href="#[d]">PrefetchAbort</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">PrefetchAbort</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[a]">ResetInit</a> from Startup.o(vectors) referenced 3 times from Startup.o(vectors)
 <LI><a href="#[b]">Undefined</a> from Startup.o(vectors) referenced from Startup.o(vectors)
 <LI><a href="#[c]">SoftwareInterrupt</a> from Startup.o(vectors) referenced from Startup.o(vectors)
 <LI><a href="#[d]">PrefetchAbort</a> from Startup.o(vectors) referenced from Startup.o(vectors)
 <LI><a href="#[e]">FIQ_Handler</a> from Startup.o(vectors) referenced from Startup.o(vectors)
 <LI><a href="#[f]">IRQDisable</a> from Startup.o(vectors) referenced from Startup.o(vectors)
 <LI><a href="#[10]">IRQEnable</a> from Startup.o(vectors) referenced from Startup.o(vectors)
 <LI><a href="#[11]">FIQDisable</a> from Startup.o(vectors) referenced from Startup.o(vectors)
 <LI><a href="#[12]">FIQEnable</a> from Startup.o(vectors) referenced from Startup.o(vectors)
 <LI><a href="#[13]">main</a> from main.o(.text) referenced from rtentry2.o(.ARM.Collect$$rtentry$$0000000D)
 <LI><a href="#[14]">cpu_adpu_proxy</a> from rfmod.o(.text) referenced from rfmod.o(.text)
 <LI><a href="#[15]">sam_adpu_proxy</a> from rfmod.o(.text) referenced from rfmod.o(.text)
 <LI><a href="#[16]">sp_ReceiveData</a> from sp_communicate.o(.text) referenced from sp_communicate.o(.text)
 <LI><a href="#[17]">GetSCKEY</a> from hd7279a.o(.text) referenced from board.o(.text)
 <LI><a href="#[18]">SCKEYInit</a> from hd7279a.o(.text) referenced from board.o(.text)
 <LI><a href="#[19]">LcdPrint</a> from lcd.o(.text) referenced from board.o(.text)
 <LI><a href="#[1a]">LcdInit</a> from lcd.o(.text) referenced from board.o(.text)
 <LI><a href="#[1b]">LcdCLS</a> from lcd.o(.text) referenced from board.o(.text)
 <LI><a href="#[1c]">InitICReader</a> from mifare.o(.text) referenced from board.o(.text)
 <LI><a href="#[1d]">ReadICCardUID</a> from mifare.o(.text) referenced from board.o(.text)
 <LI><a href="#[1e]">COM0_TimeoutHandle</a> from comm.o(.text) referenced from comm.o(.text)
 <LI><a href="#[1f]">COM1_TimeoutHandle</a> from comm.o(.text) referenced from comm.o(.text)
 <LI><a href="#[20]">IRQ_UART0</a> from comm.o(.text) referenced from comm.o(.text)
 <LI><a href="#[21]">IRQ_UART1</a> from comm.o(.text) referenced from comm.o(.text)
 <LI><a href="#[22]">IRQ_Eint3</a> from hd7279a.o(.text) referenced from hd7279a.o(.text)
 <LI><a href="#[23]">DispayMessage</a> from lcd.o(.text) referenced from hd7279a.o(.text)
 <LI><a href="#[2f]">Reset</a> from Startup.o(vectors) referenced from rtc.o(.text)
 <LI><a href="#[25]">IRQ_Timer0</a> from timer.o(.text) referenced from timer.o(.text)
 <LI><a href="#[26]">IRQ_Timer1</a> from timer.o(.text) referenced from timer.o(.text)
 <LI><a href="#[27]">_snputc</a> from _snputc.o(.text) referenced from c89vsnprintf.o(.text)
 <LI><a href="#[28]">_sputc</a> from _sputc.o(.text) referenced from __2sprintf.o(.text)
 <LI><a href="#[29]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[2a]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[2b]">do_menu_keep</a> from sp_menu.o(.text) referenced 5 times from sp_menu.o(.constdata)
 <LI><a href="#[2c]">do_menu_sign</a> from sp_menu.o(.text) referenced from sp_menu.o(.constdata)
 <LI><a href="#[2d]">do_menu_showinfo</a> from sp_menu.o(.text) referenced from sp_menu.o(.constdata)
 <LI><a href="#[2e]">do_menu_set</a> from sp_menu.o(.text) referenced from sp_menu.o(.constdata)
 <LI><a href="#[71]">InitBoard</a> from board.o(.text) referenced from sp_disp.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[2f]"></a>Reset</STRONG> (ARM, 0 bytes, Stack size unknown bytes, Startup.o(vectors))
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckAlarmTimeAndReset
</UL>

<P><STRONG><a name="[a]"></a>ResetInit</STRONG> (ARM, 0 bytes, Stack size unknown bytes, Startup.o(vectors))
<BR><BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TargetResetInit
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> Startup.o(vectors)
</UL>
<P><STRONG><a name="[31]"></a>__user_initial_stackheap</STRONG> (ARM, 0 bytes, Stack size unknown bytes, Startup.o(vectors))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[30]"></a>__main</STRONG> (ARM, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetInit
</UL>

<P><STRONG><a name="[34]"></a>__scatterload</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[36]"></a>__scatterload_rt2</STRONG> (ARM, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[1bc]"></a>__scatterload_null</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[1bd]"></a>__decompress</STRONG> (ARM, 68 bytes, Stack size unknown bytes, __dczerorl.o(!!dczerorl), UNUSED)

<P><STRONG><a name="[1be]"></a>__decompress0</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __dczerorl.o(!!dczerorl), UNUSED)

<P><STRONG><a name="[1bf]"></a>__scatterload_zeroinit</STRONG> (ARM, 44 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[37]"></a>_printf_n</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_n.o(.ARM.Collect$$_printf_percent$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_charcount (via Veneer)
</UL>

<P><STRONG><a name="[183]"></a>_printf_percent</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf (via Veneer)
</UL>

<P><STRONG><a name="[39]"></a>_printf_p</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_p.o(.ARM.Collect$$_printf_percent$$00000002))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_p &rArr; _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr (via Veneer)
</UL>

<P><STRONG><a name="[3b]"></a>_printf_f</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[3d]"></a>_printf_e</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_e.o(.ARM.Collect$$_printf_percent$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = _printf_e &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[3e]"></a>_printf_g</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_g.o(.ARM.Collect$$_printf_percent$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = _printf_g &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[3f]"></a>_printf_a</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_a.o(.ARM.Collect$$_printf_percent$$00000006))
<BR><BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex (Weak Reference)
</UL>

<P><STRONG><a name="[1c0]"></a>_printf_ll</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_ll.o(.ARM.Collect$$_printf_percent$$00000007))

<P><STRONG><a name="[41]"></a>_printf_i</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_i.o(.ARM.Collect$$_printf_percent$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_i &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec (via Veneer)
</UL>

<P><STRONG><a name="[43]"></a>_printf_d</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec (via Veneer)
</UL>

<P><STRONG><a name="[44]"></a>_printf_u</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec (via Veneer)
</UL>

<P><STRONG><a name="[45]"></a>_printf_o</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_o.o(.ARM.Collect$$_printf_percent$$0000000B))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _printf_o &rArr; _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct (via Veneer)
</UL>

<P><STRONG><a name="[47]"></a>_printf_x</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex (via Veneer)
</UL>

<P><STRONG><a name="[49]"></a>_printf_lli</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_lli.o(.ARM.Collect$$_printf_percent$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lli &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec (via Veneer)
</UL>

<P><STRONG><a name="[4b]"></a>_printf_lld</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_lld.o(.ARM.Collect$$_printf_percent$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lld &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec (via Veneer)
</UL>

<P><STRONG><a name="[4c]"></a>_printf_llu</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_llu.o(.ARM.Collect$$_printf_percent$$0000000F))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_llu &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec (via Veneer)
</UL>

<P><STRONG><a name="[4d]"></a>_printf_llo</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_llo.o(.ARM.Collect$$_printf_percent$$00000010))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_llo &rArr; _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct (via Veneer)
</UL>

<P><STRONG><a name="[4f]"></a>_printf_llx</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_llx.o(.ARM.Collect$$_printf_percent$$00000011))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _printf_llx &rArr; _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex (via Veneer)
</UL>

<P><STRONG><a name="[1c1]"></a>_printf_l</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_l.o(.ARM.Collect$$_printf_percent$$00000012))

<P><STRONG><a name="[51]"></a>_printf_c</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char (via Veneer)
</UL>

<P><STRONG><a name="[53]"></a>_printf_s</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string (via Veneer)
</UL>

<P><STRONG><a name="[55]"></a>_printf_lc</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_lc.o(.ARM.Collect$$_printf_percent$$00000015))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar (via Veneer)
</UL>

<P><STRONG><a name="[57]"></a>_printf_ls</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_ls.o(.ARM.Collect$$_printf_percent$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_ls &rArr; _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring (via Veneer)
</UL>

<P><STRONG><a name="[1c2]"></a>_printf_percent_end</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[59]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init &rArr; _fp_init
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li (via Veneer)
</UL>

<P><STRONG><a name="[5b]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[1c3]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000006))

<P><STRONG><a name="[5d]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000B))
<BR><BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale (via Veneer)
</UL>

<P><STRONG><a name="[1c4]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[1c5]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000008))

<P><STRONG><a name="[1c6]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000D))

<P><STRONG><a name="[5f]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 12 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype (via Veneer)
</UL>

<P><STRONG><a name="[1c7]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))

<P><STRONG><a name="[1c8]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[60]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 12 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric (via Veneer)
</UL>

<P><STRONG><a name="[1c9]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002A))

<P><STRONG><a name="[1ca]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000028))

<P><STRONG><a name="[1cb]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[1cc]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[1cd]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[1ce]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[1cf]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[1d0]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[1d1]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[1d2]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[1d3]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002F))

<P><STRONG><a name="[1d4]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[1d5]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[68]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls (via Veneer)
</UL>

<P><STRONG><a name="[1d6]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[1d7]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[1d8]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[1d9]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[1da]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[1db]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[35]"></a>__rt_entry</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[1dc]"></a>__rt_entry_presh_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[62]"></a>__rt_entry_sh</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[64]"></a>__rt_entry_li</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_li &rArr; __rt_lib_init &rArr; _fp_init
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (via Veneer)
</UL>

<P><STRONG><a name="[1dd]"></a>__rt_entry_postsh_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[65]"></a>__rt_entry_main</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit (via BX)
</UL>

<P><STRONG><a name="[1de]"></a>__rt_entry_postli_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[1a8]"></a>__rt_exit</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit (via Veneer)
</UL>

<P><STRONG><a name="[67]"></a>__rt_exit_ls</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown (via Veneer)
</UL>

<P><STRONG><a name="[1df]"></a>__rt_exit_prels_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[69]"></a>__rt_exit_exit</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[1e0]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, maybetermalloc1.o(.emb_text), UNUSED)

<P><STRONG><a name="[13]"></a>main</STRONG> (ARM, 256 bytes, Stack size 736 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3580 + Unknown Stack Size
<LI>Call Chain = main &rArr; sp_menu_consume &rArr; do_consume_normal &rArr; sp_consume_loop &rArr; do_purchase &rArr; sp_set_card_loss &rArr; do_cpu_set_card_loss &rArr; sp_calc_safe_mac &rArr; sp_disp_msg &rArr; LcdPrint &rArr; Lcd_DisplayFont &rArr; SF_Read &rArr; FlashFastRead &rArr; Serialize
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_wait_for_retkey
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_menu_consume
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_init_transdtl
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_init_syspara
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_check_context
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_InitCom
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitBoard
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_init_sam_card
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtentry2.o(.ARM.Collect$$rtentry$$0000000D)
</UL>
<P><STRONG><a name="[79]"></a>sp_SF_Read</STRONG> (ARM, 84 bytes, Stack size 24 bytes, sp_flash_store.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = sp_SF_Read &rArr; SF_Read &rArr; FlashFastRead &rArr; Serialize
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_read_syspara
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_read_transdtl
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_read_transno_unit
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_get_transno_lastaddr
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_write_transdtl
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_blkcard
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_disp_flash
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_write_syspara
</UL>

<P><STRONG><a name="[7b]"></a>sp_SF_Write</STRONG> (ARM, 92 bytes, Stack size 32 bytes, sp_flash_store.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = sp_SF_Write &rArr; SF_Write &rArr; FlashProgram &rArr; FlashPageProgram &rArr; IsFlashBusy &rArr; FlashReadStatusRegister &rArr; Serialize
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_write_transno_unit
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_transdtl
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_transdtl_section
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_update_left_transdtl_info
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_write_transdtl
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_check_daysum_amount
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_write_syspara
</UL>

<P><STRONG><a name="[7d]"></a>sp_SF_ErasePage</STRONG> (ARM, 52 bytes, Stack size 8 bytes, sp_flash_store.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = sp_SF_ErasePage &rArr; SF_ErasePage &rArr; FlashPageErase &rArr; IsFlashBusy &rArr; FlashReadStatusRegister &rArr; Serialize
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_ErasePage
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_write_transno_unit
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_transdtl
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_transdtl_section
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_write_syspara
</UL>

<P><STRONG><a name="[78]"></a>sp_menu_consume</STRONG> (ARM, 64 bytes, Stack size 0 bytes, sp_menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2844 + Unknown Stack Size
<LI>Call Chain = sp_menu_consume &rArr; do_consume_normal &rArr; sp_consume_loop &rArr; do_purchase &rArr; sp_set_card_loss &rArr; do_cpu_set_card_loss &rArr; sp_calc_safe_mac &rArr; sp_disp_msg &rArr; LcdPrint &rArr; Lcd_DisplayFont &rArr; SF_Read &rArr; FlashFastRead &rArr; Serialize
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_menu_main
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_consume_normal
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_consume_constant
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9a]"></a>sp_parse_file15</STRONG> (ARM, 104 bytes, Stack size 16 bytes, sp_cardoper.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = sp_parse_file15 &rArr; do_cpu_parse_file15 &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_cpu_parse_file15
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_cpucard_read_card
</UL>

<P><STRONG><a name="[a1]"></a>sp_calc_safe_mac</STRONG> (ARM, 936 bytes, Stack size 560 bytes, sp_cardoper.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1924 + Unknown Stack Size
<LI>Call Chain = sp_calc_safe_mac &rArr; sp_disp_msg &rArr; LcdPrint &rArr; Lcd_DisplayFont &rArr; SF_Read &rArr; FlashFastRead &rArr; Serialize
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_sam_adpu_command
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_cpu_adpu_command
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_disp_msg
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_cpu_set_card_loss
</UL>

<P><STRONG><a name="[a3]"></a>sp_request_card</STRONG> (ARM, 148 bytes, Stack size 24 bytes, sp_cardoper.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1396 + Unknown Stack Size
<LI>Call Chain = sp_request_card &rArr; sp_cpucard_deselect &rArr; sp_disp_msg &rArr; LcdPrint &rArr; Lcd_DisplayFont &rArr; SF_Read &rArr; FlashFastRead &rArr; Serialize
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_cpucard_deselect
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetCard_A
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadICCardUID
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_input_money
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_request_card
</UL>

<P><STRONG><a name="[a6]"></a>sp_read_card</STRONG> (ARM, 112 bytes, Stack size 16 bytes, sp_cardoper.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2468 + Unknown Stack Size
<LI>Call Chain = sp_read_card &rArr; do_cpucard_read_card &rArr; do_cpu_pay_init &rArr; sp_disp_msg &rArr; LcdPrint &rArr; Lcd_DisplayFont &rArr; SF_Read &rArr; FlashFastRead &rArr; Serialize
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_cpucard_read_card
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_consume_loop
</UL>

<P><STRONG><a name="[a7]"></a>sp_payinit</STRONG> (ARM, 112 bytes, Stack size 16 bytes, sp_cardoper.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1924 + Unknown Stack Size
<LI>Call Chain = sp_payinit &rArr; do_cpu_pay_init &rArr; sp_disp_msg &rArr; LcdPrint &rArr; Lcd_DisplayFont &rArr; SF_Read &rArr; FlashFastRead &rArr; Serialize
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_cpu_pay_init
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_purchase
</UL>

<P><STRONG><a name="[a8]"></a>sp_payment</STRONG> (ARM, 112 bytes, Stack size 16 bytes, sp_cardoper.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1932 + Unknown Stack Size
<LI>Call Chain = sp_payment &rArr; do_cpu_payment &rArr; sp_disp_msg &rArr; LcdPrint &rArr; Lcd_DisplayFont &rArr; SF_Read &rArr; FlashFastRead &rArr; Serialize
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_cpu_payment
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_purchase
</UL>

<P><STRONG><a name="[a9]"></a>sp_get_prove</STRONG> (ARM, 112 bytes, Stack size 16 bytes, sp_cardoper.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = sp_get_prove &rArr; do_cpu_get_prove &rArr; sp_cpu_adpu_command &rArr; do_adpu_command
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_cpu_get_prove
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_consume_loop
</UL>

<P><STRONG><a name="[aa]"></a>sp_set_card_loss</STRONG> (ARM, 104 bytes, Stack size 16 bytes, sp_cardoper.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2484 + Unknown Stack Size
<LI>Call Chain = sp_set_card_loss &rArr; do_cpu_set_card_loss &rArr; sp_calc_safe_mac &rArr; sp_disp_msg &rArr; LcdPrint &rArr; Lcd_DisplayFont &rArr; SF_Read &rArr; FlashFastRead &rArr; Serialize
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_cpu_set_card_loss
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_purchase
</UL>

<P><STRONG><a name="[ca]"></a>sp_halt</STRONG> (ARM, 84 bytes, Stack size 0 bytes, sp_cardoper.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_consume_loop
</UL>

<P><STRONG><a name="[ab]"></a>sp_rst_psam_card</STRONG> (ARM, 56 bytes, Stack size 16 bytes, sp_cardoper.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = sp_rst_psam_card &rArr; Rst_Psam_Card &rArr; Psam_RecvByte
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rst_Psam_Card
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_init_sam_card
</UL>

<P><STRONG><a name="[6c]"></a>sp_init_sam_card</STRONG> (ARM, 444 bytes, Stack size 800 bytes, sp_cardoper.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2164 + Unknown Stack Size
<LI>Call Chain = sp_init_sam_card &rArr; sp_disp_msg &rArr; LcdPrint &rArr; Lcd_DisplayFont &rArr; SF_Read &rArr; FlashFastRead &rArr; Serialize
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_sam_adpu_command
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Psam
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_rst_psam_card
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_disp_msg
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_init_sam_card
</UL>

<P><STRONG><a name="[98]"></a>sp_cpu_adpu_command</STRONG> (ARM, 28 bytes, Stack size 8 bytes, rfmod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sp_cpu_adpu_command &rArr; do_adpu_command
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_adpu_command
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_calc_safe_mac
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_cpu_set_card_loss
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_cpu_get_prove
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_cpu_payment
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_cpucard_read_card
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_cpu_pay_init
</UL>

<P><STRONG><a name="[9d]"></a>sp_sam_adpu_command</STRONG> (ARM, 28 bytes, Stack size 8 bytes, rfmod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sp_sam_adpu_command &rArr; do_adpu_command
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_adpu_command
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_calc_safe_mac
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_cpu_payment
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_init_sam_card
</UL>

<P><STRONG><a name="[a4]"></a>sp_cpucard_deselect</STRONG> (ARM, 60 bytes, Stack size 8 bytes, rfmod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1372 + Unknown Stack Size
<LI>Call Chain = sp_cpucard_deselect &rArr; sp_disp_msg &rArr; LcdPrint &rArr; Lcd_DisplayFont &rArr; SF_Read &rArr; FlashFastRead &rArr; Serialize
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Deselect_A
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_disp_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_cpucard_poweron
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_request_card
</UL>

<P><STRONG><a name="[b2]"></a>sp_cpucard_poweron</STRONG> (ARM, 48 bytes, Stack size 8 bytes, rfmod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1380 + Unknown Stack Size
<LI>Call Chain = sp_cpucard_poweron &rArr; sp_cpucard_deselect &rArr; sp_disp_msg &rArr; LcdPrint &rArr; Lcd_DisplayFont &rArr; SF_Read &rArr; FlashFastRead &rArr; Serialize
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_cpucard_deselect
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetCard_A
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_request_card
</UL>

<P><STRONG><a name="[bd]"></a>sp_check_record_rom</STRONG> (ARM, 12 bytes, Stack size 0 bytes, sp_consume.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_pre_check
</UL>

<P><STRONG><a name="[bb]"></a>sp_check_daysum_amount</STRONG> (ARM, 292 bytes, Stack size 72 bytes, sp_consume.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_uint32_to_buffer
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_SF_Write
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp (via Veneer)
</UL>

<P><STRONG><a name="[84]"></a>sp_pre_check</STRONG> (ARM, 116 bytes, Stack size 8 bytes, sp_consume.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1372 + Unknown Stack Size
<LI>Call Chain = sp_pre_check &rArr; sp_disp_msg &rArr; LcdPrint &rArr; Lcd_DisplayFont &rArr; SF_Read &rArr; FlashFastRead &rArr; Serialize
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_check_record_rom
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_disp_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_consume_normal
</UL>

<P><STRONG><a name="[85]"></a>sp_consume_loop</STRONG> (ARM, 712 bytes, Stack size 248 bytes, sp_consume.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2828 + Unknown Stack Size
<LI>Call Chain = sp_consume_loop &rArr; do_purchase &rArr; sp_set_card_loss &rArr; do_cpu_set_card_loss &rArr; sp_calc_safe_mac &rArr; sp_disp_msg &rArr; LcdPrint &rArr; Lcd_DisplayFont &rArr; SF_Read &rArr; FlashFastRead &rArr; Serialize
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_is_number_key
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_disp_by_type
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_purchase
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_input_money
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_request_card
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_update_sum_amt
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_halt
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_get_prove
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_read_card
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_get_key
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_disp_msg
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy (via Veneer)
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_consume_normal
</UL>

<P><STRONG><a name="[da]"></a>sp_protocol_crc</STRONG> (ARM, 88 bytes, Stack size 8 bytes, sp_pubfunc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sp_protocol_crc
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_read_syspara
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_read_transdtl
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_read_transno_unit
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_write_transno_unit
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_get_transno_lastaddr
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_transdtl
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_transdtl_section
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_update_left_transdtl_info
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_write_syspara
</UL>

<P><STRONG><a name="[c5]"></a>sp_atof_mul100</STRONG> (ARM, 244 bytes, Stack size 56 bytes, sp_pubfunc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = sp_atof_mul100 &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen (via Veneer)
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_input_money
</UL>

<P><STRONG><a name="[92]"></a>sp_bcd_hex</STRONG> (ARM, 96 bytes, Stack size 8 bytes, sp_pubfunc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sp_bcd_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_cpu_parse_file15
</UL>

<P><STRONG><a name="[ba]"></a>sp_encode_hex</STRONG> (ARM, 156 bytes, Stack size 12 bytes, sp_pubfunc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = sp_encode_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_request_card
</UL>

<P><STRONG><a name="[1e1]"></a>sp_decode_hex</STRONG> (ARM, 4 bytes, Stack size 0 bytes, sp_pubfunc.o(.text), UNUSED)

<P><STRONG><a name="[cb]"></a>sp_bigend_to_int</STRONG> (ARM, 88 bytes, Stack size 24 bytes, sp_pubfunc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[97]"></a>sp_int_to_bigend</STRONG> (ARM, 80 bytes, Stack size 32 bytes, sp_pubfunc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sp_int_to_bigend
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_cpu_pay_init
</UL>

<P><STRONG><a name="[b4]"></a>sp_bitmap_transform</STRONG> (ARM, 44 bytes, Stack size 0 bytes, sp_pubfunc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_clear_bitmap
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_set_bitmap
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_check_bitmap
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_blkcard
</UL>

<P><STRONG><a name="[cc]"></a>sp_check_bitmap</STRONG> (ARM, 92 bytes, Stack size 20 bytes, sp_pubfunc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_bitmap_transform
</UL>

<P><STRONG><a name="[cd]"></a>sp_set_bitmap</STRONG> (ARM, 84 bytes, Stack size 20 bytes, sp_pubfunc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_bitmap_transform
</UL>

<P><STRONG><a name="[ce]"></a>sp_clear_bitmap</STRONG> (ARM, 88 bytes, Stack size 20 bytes, sp_pubfunc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_bitmap_transform
</UL>

<P><STRONG><a name="[bc]"></a>sp_uint32_to_buffer</STRONG> (ARM, 64 bytes, Stack size 24 bytes, sp_pubfunc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_check_daysum_amount
</UL>

<P><STRONG><a name="[cf]"></a>sp_buffer_to_uint32</STRONG> (ARM, 92 bytes, Stack size 24 bytes, sp_pubfunc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[1e2]"></a>sp_uint16_to_buffer</STRONG> (ARM, 68 bytes, Stack size 12 bytes, sp_pubfunc.o(.text), UNUSED)

<P><STRONG><a name="[1e3]"></a>sp_buffer_to_uint16</STRONG> (ARM, 88 bytes, Stack size 8 bytes, sp_pubfunc.o(.text), UNUSED)

<P><STRONG><a name="[d0]"></a>sp_atoinet</STRONG> (ARM, 184 bytes, Stack size 32 bytes, sp_pubfunc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr (via Veneer)
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi (via Veneer)
</UL>

<P><STRONG><a name="[d1]"></a>sp_inettoa</STRONG> (ARM, 52 bytes, Stack size 24 bytes, sp_pubfunc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via Veneer)
</UL>

<P><STRONG><a name="[ee]"></a>sp_copy_systime</STRONG> (ARM, 116 bytes, Stack size 0 bytes, sp_pubfunc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_disp_request_card
</UL>

<P><STRONG><a name="[1e4]"></a>sp_get_std_datetime</STRONG> (ARM, 4 bytes, Stack size 0 bytes, sp_pubfunc.o(.text), UNUSED)

<P><STRONG><a name="[c1]"></a>sp_is_number_key</STRONG> (ARM, 268 bytes, Stack size 0 bytes, sp_pubfunc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_input_money
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_consume_loop
</UL>

<P><STRONG><a name="[d2]"></a>sp_is_leap_year</STRONG> (ARM, 112 bytes, Stack size 8 bytes, sp_pubfunc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_day_to_year2k
</UL>

<P><STRONG><a name="[d5]"></a>sp_bcd_to_uint32</STRONG> (ARM, 96 bytes, Stack size 8 bytes, sp_pubfunc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_day_to_year2k
</UL>

<P><STRONG><a name="[d4]"></a>sp_day_to_year2k</STRONG> (ARM, 196 bytes, Stack size 48 bytes, sp_pubfunc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_bcd_to_uint32
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_is_leap_year
</UL>

<P><STRONG><a name="[1e5]"></a>sp_encrypt_cardkey</STRONG> (ARM, 72 bytes, Stack size 16 bytes, sp_pubfunc.o(.text), UNUSED)

<P><STRONG><a name="[1e6]"></a>sp_calc_crc8</STRONG> (ARM, 96 bytes, Stack size 4 bytes, sp_pubfunc.o(.text), UNUSED)

<P><STRONG><a name="[82]"></a>sp_DelayNS2</STRONG> (ARM, 24 bytes, Stack size 0 bytes, sp_pubfunc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_consume_normal
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_disp_msg
</UL>

<P><STRONG><a name="[d6]"></a>sp_ByteToDecStr</STRONG> (ARM, 92 bytes, Stack size 16 bytes, sp_pubfunc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>

<P><STRONG><a name="[83]"></a>sp_get_time</STRONG> (ARM, 80 bytes, Stack size 16 bytes, sp_pubfunc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = sp_get_time &rArr; GetTime &rArr; I2C_ReadByte &rArr; I2C_WriteBus &rArr; I2C_CheckACK
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTime
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_consume_normal
</UL>

<P><STRONG><a name="[e5]"></a>sp_get_min</STRONG> (ARM, 28 bytes, Stack size 0 bytes, sp_pubfunc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_wait_for_retkey
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_disp_flash
</UL>

<P><STRONG><a name="[74]"></a>sp_check_context</STRONG> (ARM, 168 bytes, Stack size 8 bytes, sp_pubfunc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = sp_check_context &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7f]"></a>sp_get_key</STRONG> (ARM, 16 bytes, Stack size 8 bytes, sp_pubfunc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sp_get_key
</UL>
<BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSCKEY
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_disp_insufficient_balance
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_disp_consume_success
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_wait_for_retkey
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_input_money
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_consume_loop
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_show_menu
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_menu_keep
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_menu_sign
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_consume_normal
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_menu_set
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_disp_msg
</UL>

<P><STRONG><a name="[db]"></a>sp_get_transno_lastaddr</STRONG> (ARM, 264 bytes, Stack size 312 bytes, sp_flash_impl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1676 + Unknown Stack Size
<LI>Call Chain = sp_get_transno_lastaddr &rArr; sp_disp_msg &rArr; LcdPrint &rArr; Lcd_DisplayFont &rArr; SF_Read &rArr; FlashFastRead &rArr; Serialize
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_protocol_crc
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_SF_Read
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_disp_msg
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_write_transno_unit
</UL>

<P><STRONG><a name="[dc]"></a>sp_write_transno_unit</STRONG> (ARM, 256 bytes, Stack size 32 bytes, sp_flash_impl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1708 + Unknown Stack Size
<LI>Call Chain = sp_write_transno_unit &rArr; sp_get_transno_lastaddr &rArr; sp_disp_msg &rArr; LcdPrint &rArr; Lcd_DisplayFont &rArr; SF_Read &rArr; FlashFastRead &rArr; Serialize
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_get_transno_lastaddr
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_protocol_crc
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_SF_ErasePage
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_SF_Write
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_disp_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_write_transdtl
</UL>

<P><STRONG><a name="[dd]"></a>sp_read_transno_unit</STRONG> (ARM, 384 bytes, Stack size 312 bytes, sp_flash_impl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = sp_read_transno_unit &rArr; sp_SF_Read &rArr; SF_Read &rArr; FlashFastRead &rArr; Serialize
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_protocol_crc
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_SF_Read
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_read_transdtl
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_init_transdtl
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_write_transdtl
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_get_transno
</UL>

<P><STRONG><a name="[b8]"></a>sp_get_transno</STRONG> (ARM, 60 bytes, Stack size 32 bytes, sp_flash_impl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = sp_get_transno &rArr; sp_read_transno_unit &rArr; sp_SF_Read &rArr; SF_Read &rArr; FlashFastRead &rArr; Serialize
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_read_transno_unit
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_transdtl_section
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepare_transdtl
</UL>

<P><STRONG><a name="[c8]"></a>sp_write_transdtl</STRONG> (ARM, 880 bytes, Stack size 456 bytes, sp_flash_impl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2164 + Unknown Stack Size
<LI>Call Chain = sp_write_transdtl &rArr; sp_write_transno_unit &rArr; sp_get_transno_lastaddr &rArr; sp_disp_msg &rArr; LcdPrint &rArr; Lcd_DisplayFont &rArr; SF_Read &rArr; FlashFastRead &rArr; Serialize
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_read_transno_unit
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_write_transno_unit
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_update_left_transdtl_info
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_do_write_card
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_get_next_transdtl_addr
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_SF_Write
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_SF_Read
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_disp_msg
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_purchase
</UL>

<P><STRONG><a name="[e0]"></a>sp_read_transdtl</STRONG> (ARM, 248 bytes, Stack size 64 bytes, sp_flash_impl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 492<LI>Call Chain = sp_read_transdtl &rArr; sp_read_transno_unit &rArr; sp_SF_Read &rArr; SF_Read &rArr; FlashFastRead &rArr; Serialize
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_read_transno_unit
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_protocol_crc
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_SF_Read
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_init_transdtl
</UL>

<P><STRONG><a name="[6f]"></a>sp_write_syspara</STRONG> (ARM, 352 bytes, Stack size 88 bytes, sp_flash_impl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1452 + Unknown Stack Size
<LI>Call Chain = sp_write_syspara &rArr; sp_disp_msg &rArr; LcdPrint &rArr; Lcd_DisplayFont &rArr; SF_Read &rArr; FlashFastRead &rArr; Serialize
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_protocol_crc
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_SF_ErasePage
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_SF_Write
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_SF_Read
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_disp_msg
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_init_syspara
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_init_sam_card
</UL>

<P><STRONG><a name="[e1]"></a>sp_read_syspara</STRONG> (ARM, 156 bytes, Stack size 24 bytes, sp_flash_impl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1388 + Unknown Stack Size
<LI>Call Chain = sp_read_syspara &rArr; sp_disp_msg &rArr; LcdPrint &rArr; Lcd_DisplayFont &rArr; SF_Read &rArr; FlashFastRead &rArr; Serialize
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_protocol_crc
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_SF_Read
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_disp_msg
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_init_syspara
</UL>

<P><STRONG><a name="[77]"></a>sp_init_transdtl</STRONG> (ARM, 104 bytes, Stack size 16 bytes, sp_flash_impl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1508 + Unknown Stack Size
<LI>Call Chain = sp_init_transdtl &rArr; reset_transdtl &rArr; reset_transdtl_section &rArr; sp_disp_msg &rArr; LcdPrint &rArr; Lcd_DisplayFont &rArr; SF_Read &rArr; FlashFastRead &rArr; Serialize
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_init_transdtl
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_transdtl
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_disp_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[76]"></a>sp_init_syspara</STRONG> (ARM, 660 bytes, Stack size 16 bytes, sp_flash_impl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1468 + Unknown Stack Size
<LI>Call Chain = sp_init_syspara &rArr; sp_write_syspara &rArr; sp_disp_msg &rArr; LcdPrint &rArr; Lcd_DisplayFont &rArr; SF_Read &rArr; FlashFastRead &rArr; Serialize
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_read_syspara
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_write_syspara
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_disp_msg
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[89]"></a>sp_disp_flash</STRONG> (ARM, 224 bytes, Stack size 1568 bytes, sp_flash_impl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4020 + Unknown Stack Size
<LI>Call Chain = sp_disp_flash &rArr; sp_wait_for_retkey &rArr; do_wait_for_retkey &rArr; LcdPrint &rArr; Lcd_DisplayFont &rArr; SF_Read &rArr; FlashFastRead &rArr; Serialize
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_get_min
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_SF_Read
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_wait_for_retkey
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_disp_msg
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_menu_showinfo
</UL>

<P><STRONG><a name="[e9]"></a>sp_send_msg</STRONG> (ARM, 64 bytes, Stack size 16 bytes, sp_communicate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2176<LI>Call Chain = sp_send_msg &rArr; do_send_msg &rArr; COM_SendBuf &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_send_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_send_struct
</UL>

<P><STRONG><a name="[88]"></a>sp_send_struct</STRONG> (ARM, 64 bytes, Stack size 520 bytes, sp_communicate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2696<LI>Call Chain = sp_send_struct &rArr; sp_send_msg &rArr; do_send_msg &rArr; COM_SendBuf &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_send_msg
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_menu_sign
</UL>

<P><STRONG><a name="[73]"></a>sp_InitCom</STRONG> (ARM, 88 bytes, Stack size 24 bytes, sp_communicate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = sp_InitCom &rArr; StartComm &rArr; UART_Init &rArr; UART1_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartComm
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[eb]"></a>sp_disp_press_key</STRONG> (ARM, 88 bytes, Stack size 112 bytes, sp_disp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdPrint
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via Veneer)
</UL>

<P><STRONG><a name="[bf]"></a>sp_disp_money</STRONG> (ARM, 180 bytes, Stack size 48 bytes, sp_disp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 236 + Unknown Stack Size
<LI>Call Chain = sp_disp_money &rArr; LcdPrint &rArr; Lcd_DisplayFont &rArr; SF_Read &rArr; FlashFastRead &rArr; Serialize
</UL>
<BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdPrint
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdCLS
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen (via Veneer)
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_input_money
</UL>

<P><STRONG><a name="[c7]"></a>sp_disp_by_type</STRONG> (ARM, 208 bytes, Stack size 16 bytes, sp_disp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 292 + Unknown Stack Size
<LI>Call Chain = sp_disp_by_type &rArr; do_disp_request_card &rArr; LcdPrint &rArr; Lcd_DisplayFont &rArr; SF_Read &rArr; FlashFastRead &rArr; Serialize
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_disp_insufficient_balance
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_disp_consume_success
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_disp_cancel_consume
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_disp_user_balance
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_disp_request_card
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_purchase
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_consume_loop
</UL>

<P><STRONG><a name="[70]"></a>sp_disp_msg</STRONG> (ARM, 232 bytes, Stack size 1176 bytes, sp_disp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1364 + Unknown Stack Size
<LI>Call Chain = sp_disp_msg &rArr; LcdPrint &rArr; Lcd_DisplayFont &rArr; SF_Read &rArr; FlashFastRead &rArr; Serialize
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_get_key
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_DelayNS2
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdPrint
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdCLS
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via Veneer)
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsnprintf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_ReceiveData
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_read_syspara
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_write_transno_unit
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_get_transno_lastaddr
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_init_transdtl
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_transdtl_section
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_write_transdtl
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_purchase
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_input_money
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_request_card
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_cpucard_deselect
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_calc_safe_mac
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_cpu_payment
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_cpucard_read_card
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_cpu_pay_init
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_pre_check
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_disp_flash
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_consume_loop
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_menu_keep
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_menu_sign
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_consume_normal
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_consume_constant
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_menu_set
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_write_syspara
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_init_transdtl
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_init_syspara
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_init_sam_card
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_init_sam_card
</UL>

<P><STRONG><a name="[f8]"></a>sp_messagebox</STRONG> (ARM, 168 bytes, Stack size 2104 bytes, sp_disp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;messagebox_yes_no
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen (via Veneer)
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsnprintf (via Veneer)
</UL>

<P><STRONG><a name="[75]"></a>sp_wait_for_retkey</STRONG> (ARM, 204 bytes, Stack size 2112 bytes, sp_disp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2452 + Unknown Stack Size
<LI>Call Chain = sp_wait_for_retkey &rArr; do_wait_for_retkey &rArr; LcdPrint &rArr; Lcd_DisplayFont &rArr; SF_Read &rArr; FlashFastRead &rArr; Serialize
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_wait_for_retkey
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen (via Veneer)
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via Veneer)
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsnprintf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_disp_flash
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1e7]"></a>BattCheck</STRONG> (ARM, 56 bytes, Stack size 0 bytes, board.o(.text), UNUSED)

<P><STRONG><a name="[f9]"></a>DelayNS</STRONG> (ARM, 44 bytes, Stack size 0 bytes, board.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdInit
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOControlMode
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep
</UL>

<P><STRONG><a name="[72]"></a>Beep</STRONG> (ARM, 80 bytes, Stack size 8 bytes, board.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Beep
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayNS
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[71]"></a>InitBoard</STRONG> (ARM, 268 bytes, Stack size 16 bytes, board.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = InitBoard &rArr; IOControlMode &rArr; I2C_WriteByte &rArr; I2C_WriteBus &rArr; I2C_CheckACK
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__InitTimer
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRTCType
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLcdType
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLcdContrast
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_Init
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCKEYInit
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCInit
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdInit
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Printer
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimer
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOControlMode
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sp_disp.o(.text)
</UL>
<P><STRONG><a name="[16a]"></a>BeeperCtr</STRONG> (ARM, 124 bytes, Stack size 0 bytes, board.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Timer0
</UL>

<P><STRONG><a name="[ea]"></a>StartComm</STRONG> (ARM, 184 bytes, Stack size 16 bytes, comm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = StartComm &rArr; UART_Init &rArr; UART1_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_InitCom
</UL>

<P><STRONG><a name="[e8]"></a>COM_SendBuf</STRONG> (ARM, 352 bytes, Stack size 16 bytes, comm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = COM_SendBuf &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc (via Veneer)
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_send_msg
</UL>

<P><STRONG><a name="[18]"></a>SCKEYInit</STRONG> (ARM, 204 bytes, Stack size 8 bytes, hd7279a.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SCKEYInit
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitBoard
</UL>
<BR>[Address Reference Count : 1]<UL><LI> board.o(.text)
</UL>
<P><STRONG><a name="[17]"></a>GetSCKEY</STRONG> (ARM, 432 bytes, Stack size 0 bytes, hd7279a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_get_key
</UL>
<BR>[Address Reference Count : 1]<UL><LI> board.o(.text)
</UL>
<P><STRONG><a name="[1e8]"></a>GetS2KEY</STRONG> (ARM, 440 bytes, Stack size 0 bytes, hd7279a.o(.text), UNUSED)

<P><STRONG><a name="[10d]"></a>LedCLS</STRONG> (ARM, 268 bytes, Stack size 24 bytes, hd7279a.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free (via Veneer)
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[1e9]"></a>LedInit</STRONG> (ARM, 68 bytes, Stack size 0 bytes, hd7279a.o(.text), UNUSED)

<P><STRONG><a name="[1ea]"></a>SelectModeLed</STRONG> (ARM, 12 bytes, Stack size 0 bytes, hd7279a.o(.text), UNUSED)

<P><STRONG><a name="[110]"></a>ChangeCode</STRONG> (ARM, 336 bytes, Stack size 4 bytes, hd7279a.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedPrint
</UL>

<P><STRONG><a name="[10f]"></a>LedPrint</STRONG> (ARM, 688 bytes, Stack size 144 bytes, hd7279a.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free (via Veneer)
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc (via Veneer)
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeCode
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Send
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__SetSoftTimer
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen (via Veneer)
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy (via Veneer)
</UL>

<P><STRONG><a name="[102]"></a>SetLcdType</STRONG> (ARM, 12 bytes, Stack size 0 bytes, lcd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitBoard
</UL>

<P><STRONG><a name="[1eb]"></a>GetLcdType</STRONG> (ARM, 12 bytes, Stack size 0 bytes, lcd.o(.text), UNUSED)

<P><STRONG><a name="[103]"></a>SetLcdContrast</STRONG> (ARM, 12 bytes, Stack size 0 bytes, lcd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitBoard
</UL>

<P><STRONG><a name="[23]"></a>DispayMessage</STRONG> (ARM, 440 bytes, Stack size 32 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DispayMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hd7279a.o(.text)
</UL>
<P><STRONG><a name="[1b]"></a>LcdCLS</STRONG> (ARM, 204 bytes, Stack size 40 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = LcdCLS &rArr; SetColumn &rArr; WriteDataOrCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetColumn
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPage
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDataOrCmd
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_disp_insufficient_balance
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_disp_consume_success
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_disp_cancel_consume
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_disp_user_balance
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_disp_request_card
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_wait_for_retkey
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_disp_money
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_show_menu
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_disp_msg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> board.o(.text)
</UL>
<P><STRONG><a name="[19]"></a>LcdPrint</STRONG> (ARM, 224 bytes, Stack size 32 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = LcdPrint &rArr; Lcd_DisplayFont &rArr; SF_Read &rArr; FlashFastRead &rArr; Serialize
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_DisplayFont
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_DisplayASC
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_disp_press_key
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_disp_insufficient_balance
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_disp_consume_success
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_disp_cancel_consume
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_disp_user_balance
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_disp_request_card
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_wait_for_retkey
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_disp_money
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_show_menu
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_disp_msg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> board.o(.text)
</UL>
<P><STRONG><a name="[1a]"></a>LcdInit</STRONG> (ARM, 504 bytes, Stack size 8 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LcdInit &rArr; FunctionSet &rArr; WriteDataOrCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayOff
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayOn
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunctionSet
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDataOrCmd
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DelayN20ns
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayNS
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitBoard
</UL>
<BR>[Address Reference Count : 1]<UL><LI> board.o(.text)
</UL>
<P><STRONG><a name="[11c]"></a>SPI_SendByte</STRONG> (ARM, 124 bytes, Stack size 0 bytes, mifare.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_WriteFIFO
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_FIFO
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_ReadReg
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_WriteReg
</UL>

<P><STRONG><a name="[11b]"></a>RF_WriteReg</STRONG> (ARM, 72 bytes, Stack size 12 bytes, mifare.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RF_WriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_RATS
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIF_Value
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIF_Transfer
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M500PiccAuthKey
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIF_WriteBlock
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIF_ReadBlock
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Authentication
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_Card
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AntiColl
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_BitFraming
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Request
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIF_Halt
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_Send
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Reader_TimeOut
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_FIFO
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_FM1715
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM1715_Bus_Sel
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Deselect_A
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CpuCard_Apdu
</UL>

<P><STRONG><a name="[11e]"></a>SPI_ReadByte</STRONG> (ARM, 108 bytes, Stack size 0 bytes, mifare.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_FIFO
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_ReadReg
</UL>

<P><STRONG><a name="[11d]"></a>RF_ReadReg</STRONG> (ARM, 76 bytes, Stack size 12 bytes, mifare.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RF_ReadReg
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ReadByte
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_RATS
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIF_Value
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIF_Transfer
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M500PiccAuthKey
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M500PiccAuthState
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIF_WriteBlock
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIF_ReadBlock
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Authentication
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_Card
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AntiColl
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Request
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIF_Halt
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_Send
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_FIFO
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_FIFO
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_FM1715
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM1715_Bus_Sel
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CpuCard_Apdu
</UL>

<P><STRONG><a name="[11f]"></a>FM1715_Bus_Sel</STRONG> (ARM, 88 bytes, Stack size 8 bytes, mifare.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FM1715_Bus_Sel &rArr; RF_ReadReg
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_ReadReg
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_FM1715
</UL>

<P><STRONG><a name="[120]"></a>Init_FM1715</STRONG> (ARM, 216 bytes, Stack size 12 bytes, mifare.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Init_FM1715 &rArr; FM1715_Bus_Sel &rArr; RF_ReadReg
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM1715_Bus_Sel
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_ReadReg
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitICReader
</UL>

<P><STRONG><a name="[1c]"></a>InitICReader</STRONG> (ARM, 52 bytes, Stack size 4 bytes, mifare.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = InitICReader &rArr; Init_FM1715 &rArr; FM1715_Bus_Sel &rArr; RF_ReadReg
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_FM1715
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_RATS
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CpuCard_Apdu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> board.o(.text)
</UL>
<P><STRONG><a name="[121]"></a>Read_FIFO</STRONG> (ARM, 176 bytes, Stack size 88 bytes, mifare.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = Read_FIFO &rArr; RF_ReadReg
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_ReadReg
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ReadByte
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SendByte
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIF_Value
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIF_Transfer
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIF_WriteBlock
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIF_ReadBlock
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Request
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_Send
</UL>

<P><STRONG><a name="[122]"></a>RF_WriteFIFO</STRONG> (ARM, 92 bytes, Stack size 20 bytes, mifare.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RF_WriteFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_Send
</UL>

<P><STRONG><a name="[123]"></a>Clear_FIFO</STRONG> (ARM, 92 bytes, Stack size 12 bytes, mifare.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Clear_FIFO &rArr; RF_ReadReg
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_ReadReg
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_Send
</UL>

<P><STRONG><a name="[124]"></a>Reset_Reader_TimeOut</STRONG> (ARM, 48 bytes, Stack size 4 bytes, mifare.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_WriteReg
</UL>

<P><STRONG><a name="[125]"></a>Command_Send</STRONG> (ARM, 352 bytes, Stack size 288 bytes, mifare.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = Command_Send &rArr; Read_FIFO &rArr; RF_ReadReg
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_FIFO
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_WriteFIFO
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_FIFO
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_ReadReg
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_WriteReg
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_RATS
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIF_Value
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIF_Transfer
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M500PiccAuthKey
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M500PiccAuthState
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIF_WriteBlock
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIF_ReadBlock
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Authentication
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_Card
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AntiColl
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Request
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIF_Halt
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Deselect_A
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CpuCard_Apdu
</UL>

<P><STRONG><a name="[128]"></a>Judge_Req</STRONG> (ARM, 12 bytes, Stack size 0 bytes, mifare.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Request
</UL>

<P><STRONG><a name="[126]"></a>MIF_Halt</STRONG> (ARM, 176 bytes, Stack size 16 bytes, mifare.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_Send
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_ReadReg
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_WriteReg
</UL>

<P><STRONG><a name="[127]"></a>Request</STRONG> (ARM, 192 bytes, Stack size 16 bytes, mifare.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = Request &rArr; Command_Send &rArr; Read_FIFO &rArr; RF_ReadReg
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_Req
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_Send
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_FIFO
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_ReadReg
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HL_Active
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetCard_A
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadICCardUID
</UL>

<P><STRONG><a name="[129]"></a>Set_BitFraming</STRONG> (ARM, 520 bytes, Stack size 12 bytes, mifare.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Set_BitFraming &rArr; RF_WriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AntiColl
</UL>

<P><STRONG><a name="[12c]"></a>Check_UID</STRONG> (ARM, 64 bytes, Stack size 0 bytes, mifare.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AntiColl
</UL>

<P><STRONG><a name="[12b]"></a>Save_UID</STRONG> (ARM, 364 bytes, Stack size 16 bytes, mifare.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Save_UID
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AntiColl
</UL>

<P><STRONG><a name="[12a]"></a>AntiColl</STRONG> (ARM, 420 bytes, Stack size 24 bytes, mifare.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = AntiColl &rArr; Command_Send &rArr; Read_FIFO &rArr; RF_ReadReg
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_UID
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_UID
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_BitFraming
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_Send
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_ReadReg
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HL_Active
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetCard_A
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadICCardUID
</UL>

<P><STRONG><a name="[12d]"></a>Select_Card</STRONG> (ARM, 272 bytes, Stack size 16 bytes, mifare.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = Select_Card &rArr; Command_Send &rArr; Read_FIFO &rArr; RF_ReadReg
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_Send
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_ReadReg
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HL_Active
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetCard_A
</UL>

<P><STRONG><a name="[1d]"></a>ReadICCardUID</STRONG> (ARM, 140 bytes, Stack size 16 bytes, mifare.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = ReadICCardUID &rArr; AntiColl &rArr; Command_Send &rArr; Read_FIFO &rArr; RF_ReadReg
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AntiColl
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Request
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_request_card
</UL>
<BR>[Address Reference Count : 1]<UL><LI> board.o(.text)
</UL>
<P><STRONG><a name="[12e]"></a>Authentication</STRONG> (ARM, 444 bytes, Stack size 32 bytes, mifare.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_Send
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_ReadReg
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_WriteReg
</UL>

<P><STRONG><a name="[12f]"></a>MIF_ReadBlock</STRONG> (ARM, 252 bytes, Stack size 16 bytes, mifare.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_Send
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_FIFO
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_ReadReg
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIF_ReadCard3
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIF_ReadCard2
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIF_ReadCard
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIF_ReadCards
</UL>

<P><STRONG><a name="[130]"></a>MIF_WriteBlock</STRONG> (ARM, 384 bytes, Stack size 24 bytes, mifare.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_Send
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_FIFO
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_ReadReg
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIF_WriteCards
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIF_WriteCard
</UL>

<P><STRONG><a name="[131]"></a>M500PiccAuthState</STRONG> (ARM, 200 bytes, Stack size 24 bytes, mifare.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_Send
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M500PiccAuthKey
</UL>

<P><STRONG><a name="[132]"></a>M500PiccAuthKey</STRONG> (ARM, 144 bytes, Stack size 32 bytes, mifare.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M500PiccAuthState
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_Send
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_ReadReg
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M500PiccAuthOK
</UL>

<P><STRONG><a name="[134]"></a>M500HostCodeKey</STRONG> (ARM, 96 bytes, Stack size 8 bytes, mifare.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M500PiccAuthOK
</UL>

<P><STRONG><a name="[133]"></a>M500PiccAuthOK</STRONG> (ARM, 108 bytes, Stack size 32 bytes, mifare.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M500HostCodeKey
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M500PiccAuthKey
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HL_Active
</UL>

<P><STRONG><a name="[135]"></a>HL_Active</STRONG> (ARM, 180 bytes, Stack size 24 bytes, mifare.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M500PiccAuthOK
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_Card
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AntiColl
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Request
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIF_Purse
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIF_WriteCards
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIF_WriteCard
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIF_ReadCard3
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIF_ReadCard2
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIF_ReadCard
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIF_ReadCards
</UL>

<P><STRONG><a name="[136]"></a>MIF_ReadCards</STRONG> (ARM, 300 bytes, Stack size 40 bytes, mifare.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HL_Active
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIF_ReadBlock
</UL>

<P><STRONG><a name="[137]"></a>MIF_ReadCard</STRONG> (ARM, 136 bytes, Stack size 32 bytes, mifare.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HL_Active
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIF_ReadBlock
</UL>

<P><STRONG><a name="[138]"></a>MIF_ReadCard2</STRONG> (ARM, 160 bytes, Stack size 32 bytes, mifare.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HL_Active
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIF_ReadBlock
</UL>

<P><STRONG><a name="[139]"></a>MIF_ReadCard3</STRONG> (ARM, 184 bytes, Stack size 32 bytes, mifare.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HL_Active
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIF_ReadBlock
</UL>

<P><STRONG><a name="[13a]"></a>MIF_WriteCard</STRONG> (ARM, 136 bytes, Stack size 32 bytes, mifare.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HL_Active
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIF_WriteBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIF_InitPurse
</UL>

<P><STRONG><a name="[13b]"></a>MIF_WriteCards</STRONG> (ARM, 288 bytes, Stack size 40 bytes, mifare.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HL_Active
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIF_WriteBlock
</UL>

<P><STRONG><a name="[13c]"></a>MIF_InitPurse</STRONG> (ARM, 196 bytes, Stack size 24 bytes, mifare.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIF_WriteCard
</UL>

<P><STRONG><a name="[13d]"></a>MIF_Transfer</STRONG> (ARM, 272 bytes, Stack size 16 bytes, mifare.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_Send
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_FIFO
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_ReadReg
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIF_Value
</UL>

<P><STRONG><a name="[13e]"></a>MIF_Value</STRONG> (ARM, 344 bytes, Stack size 24 bytes, mifare.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIF_Transfer
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_Send
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_FIFO
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_ReadReg
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIF_Purse
</UL>

<P><STRONG><a name="[13f]"></a>MIF_Purse</STRONG> (ARM, 168 bytes, Stack size 32 bytes, mifare.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIF_Value
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HL_Active
</UL>

<P><STRONG><a name="[140]"></a>CPU_RATS</STRONG> (ARM, 800 bytes, Stack size 104 bytes, mifare.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 492<LI>Call Chain = CPU_RATS &rArr; Command_Send &rArr; Read_FIFO &rArr; RF_ReadReg
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_Send
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_ReadReg
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_WriteReg
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitICReader
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetCard_A
</UL>

<P><STRONG><a name="[af]"></a>CpuCard_Apdu</STRONG> (ARM, 2652 bytes, Stack size 912 bytes, mifare.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1300<LI>Call Chain = CpuCard_Apdu &rArr; Command_Send &rArr; Read_FIFO &rArr; RF_ReadReg
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_Send
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_ReadReg
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_WriteReg
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memxcpy
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitICReader
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_adpu_proxy
</UL>

<P><STRONG><a name="[a5]"></a>ResetCard_A</STRONG> (ARM, 140 bytes, Stack size 80 bytes, mifare.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 572<LI>Call Chain = ResetCard_A &rArr; CPU_RATS &rArr; Command_Send &rArr; Read_FIFO &rArr; RF_ReadReg
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_RATS
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_Card
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AntiColl
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Request
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_cpucard_poweron
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_request_card
</UL>

<P><STRONG><a name="[b1]"></a>Deselect_A</STRONG> (ARM, 100 bytes, Stack size 8 bytes, mifare.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = Deselect_A &rArr; Command_Send &rArr; Read_FIFO &rArr; RF_ReadReg
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_Send
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_cpucard_deselect
</UL>

<P><STRONG><a name="[146]"></a>InitTimer0</STRONG> (ARM, 68 bytes, Stack size 8 bytes, psam.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = InitTimer0
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Psam
</UL>

<P><STRONG><a name="[142]"></a>Psam_Reset</STRONG> (ARM, 148 bytes, Stack size 8 bytes, psam.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Psam_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rst_Psam_Card
</UL>

<P><STRONG><a name="[ac]"></a>Rst_Psam_Card</STRONG> (ARM, 132 bytes, Stack size 24 bytes, psam.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Rst_Psam_Card &rArr; Psam_RecvByte
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Psam_Reset
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Psam_RecvByte
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_rst_psam_card
</UL>

<P><STRONG><a name="[ae]"></a>CosCommand</STRONG> (ARM, 544 bytes, Stack size 64 bytes, psam.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = CosCommand &rArr; Psam_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DelayNs_psam
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Psam_SendByte
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Psam_RecvByte
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sam_adpu_proxy
</UL>

<P><STRONG><a name="[ad]"></a>Init_Psam</STRONG> (ARM, 60 bytes, Stack size 8 bytes, psam.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Init_Psam &rArr; InitTimer0
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimer0
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_init_sam_card
</UL>

<P><STRONG><a name="[fe]"></a>SetRTCType</STRONG> (ARM, 12 bytes, Stack size 0 bytes, rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitBoard
</UL>

<P><STRONG><a name="[1ec]"></a>InitWatchDog</STRONG> (ARM, 76 bytes, Stack size 0 bytes, rtc.o(.text), UNUSED)

<P><STRONG><a name="[1ed]"></a>IntiAlarmTimer</STRONG> (ARM, 108 bytes, Stack size 0 bytes, rtc.o(.text), UNUSED)

<P><STRONG><a name="[1ee]"></a>SetAlarmTime</STRONG> (ARM, 180 bytes, Stack size 0 bytes, rtc.o(.text), UNUSED)

<P><STRONG><a name="[147]"></a>CheckAlarmTimeAndReset</STRONG> (ARM, 76 bytes, Stack size 16 bytes, rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset
</UL>

<P><STRONG><a name="[ff]"></a>RTCInit</STRONG> (ARM, 76 bytes, Stack size 0 bytes, rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitBoard
</UL>

<P><STRONG><a name="[d7]"></a>GetTime</STRONG> (ARM, 576 bytes, Stack size 40 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = GetTime &rArr; I2C_ReadByte &rArr; I2C_WriteBus &rArr; I2C_CheckACK
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadByte
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTick
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_disp_request_card
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_get_time
</UL>

<P><STRONG><a name="[149]"></a>SetTime</STRONG> (ARM, 608 bytes, Stack size 32 bytes, rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteByte
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[14b]"></a>GetTick</STRONG> (ARM, 64 bytes, Stack size 16 bytes, rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTime
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTickCount
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPause
</UL>

<P><STRONG><a name="[14c]"></a>GetPause</STRONG> (ARM, 48 bytes, Stack size 16 bytes, rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTick
</UL>

<P><STRONG><a name="[14d]"></a>GetTickCount</STRONG> (ARM, 32 bytes, Stack size 8 bytes, rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTick
</UL>

<P><STRONG><a name="[15c]"></a>FlashTimeOut</STRONG> (ARM, 84 bytes, Stack size 0 bytes, m25pe16.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashBulkErase
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashSectorErase
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashPageErase
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashPageProgram
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashPageWrite
</UL>

<P><STRONG><a name="[fd]"></a>SF_Init</STRONG> (ARM, 16 bytes, Stack size 8 bytes, m25pe16.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SF_Init &rArr; FL_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitBoard
</UL>

<P><STRONG><a name="[151]"></a>ConfigureSpiMaster</STRONG> (ARM, 76 bytes, Stack size 0 bytes, m25pe16.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serialize
</UL>

<P><STRONG><a name="[152]"></a>FlashWriteEnable</STRONG> (ARM, 56 bytes, Stack size 16 bytes, m25pe16.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = FlashWriteEnable &rArr; Serialize
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serialize
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteLockRegister
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashBulkErase
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashSectorErase
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashPageErase
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashPageProgram
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashPageWrite
</UL>

<P><STRONG><a name="[153]"></a>FlashWriteDisable</STRONG> (ARM, 56 bytes, Stack size 16 bytes, m25pe16.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serialize
</UL>

<P><STRONG><a name="[154]"></a>FlashReadDeviceIdentification</STRONG> (ARM, 156 bytes, Stack size 32 bytes, m25pe16.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serialize
</UL>

<P><STRONG><a name="[155]"></a>FlashReadManufacturerIdentification</STRONG> (ARM, 112 bytes, Stack size 32 bytes, m25pe16.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serialize
</UL>

<P><STRONG><a name="[156]"></a>FlashReadStatusRegister</STRONG> (ARM, 92 bytes, Stack size 32 bytes, m25pe16.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = FlashReadStatusRegister &rArr; Serialize
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serialize
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsFlashBusy
</UL>

<P><STRONG><a name="[157]"></a>IsFlashBusy</STRONG> (ARM, 44 bytes, Stack size 8 bytes, m25pe16.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = IsFlashBusy &rArr; FlashReadStatusRegister &rArr; Serialize
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashReadStatusRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteLockRegister
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashDeepPowerDown
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashBulkErase
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashSectorErase
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashPageErase
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashPageProgram
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashPageWrite
</UL>

<P><STRONG><a name="[158]"></a>FlashRead</STRONG> (ARM, 132 bytes, Stack size 40 bytes, m25pe16.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serialize
</UL>

<P><STRONG><a name="[159]"></a>FlashFastRead</STRONG> (ARM, 136 bytes, Stack size 40 bytes, m25pe16.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = FlashFastRead &rArr; Serialize
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serialize
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_Read
</UL>

<P><STRONG><a name="[15a]"></a>SF_ReadContinuous</STRONG> (ARM, 136 bytes, Stack size 40 bytes, m25pe16.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serialize
</UL>

<P><STRONG><a name="[15b]"></a>FlashPageWrite</STRONG> (ARM, 220 bytes, Stack size 32 bytes, m25pe16.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = FlashPageWrite &rArr; IsFlashBusy &rArr; FlashReadStatusRegister &rArr; Serialize
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsFlashBusy
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteEnable
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashTimeOut
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serialize
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWrite
</UL>

<P><STRONG><a name="[15d]"></a>FlashPageProgram</STRONG> (ARM, 220 bytes, Stack size 32 bytes, m25pe16.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = FlashPageProgram &rArr; IsFlashBusy &rArr; FlashReadStatusRegister &rArr; Serialize
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsFlashBusy
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteEnable
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashTimeOut
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serialize
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashProgram
</UL>

<P><STRONG><a name="[15e]"></a>FlashPageErase</STRONG> (ARM, 176 bytes, Stack size 24 bytes, m25pe16.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = FlashPageErase &rArr; IsFlashBusy &rArr; FlashReadStatusRegister &rArr; Serialize
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsFlashBusy
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteEnable
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashTimeOut
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serialize
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_ErasePage
</UL>

<P><STRONG><a name="[15f]"></a>FlashSectorErase</STRONG> (ARM, 172 bytes, Stack size 24 bytes, m25pe16.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsFlashBusy
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteEnable
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashTimeOut
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serialize
</UL>

<P><STRONG><a name="[160]"></a>FlashBulkErase</STRONG> (ARM, 136 bytes, Stack size 16 bytes, m25pe16.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsFlashBusy
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteEnable
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashTimeOut
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serialize
</UL>

<P><STRONG><a name="[161]"></a>FlashDeepPowerDown</STRONG> (ARM, 76 bytes, Stack size 16 bytes, m25pe16.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsFlashBusy
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serialize
</UL>

<P><STRONG><a name="[162]"></a>FlashReleaseFromDeepPowerDown</STRONG> (ARM, 56 bytes, Stack size 16 bytes, m25pe16.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serialize
</UL>

<P><STRONG><a name="[163]"></a>FlashWrite</STRONG> (ARM, 180 bytes, Stack size 32 bytes, m25pe16.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = FlashWrite &rArr; FlashPageWrite &rArr; IsFlashBusy &rArr; FlashReadStatusRegister &rArr; Serialize
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashPageWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_Write
</UL>

<P><STRONG><a name="[164]"></a>FlashProgram</STRONG> (ARM, 180 bytes, Stack size 32 bytes, m25pe16.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = FlashProgram &rArr; FlashPageProgram &rArr; IsFlashBusy &rArr; FlashReadStatusRegister &rArr; Serialize
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashPageProgram
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_Write
</UL>

<P><STRONG><a name="[165]"></a>FlashReadLockRegister</STRONG> (ARM, 128 bytes, Stack size 32 bytes, m25pe16.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serialize
</UL>

<P><STRONG><a name="[166]"></a>FlashWriteLockRegister</STRONG> (ARM, 140 bytes, Stack size 32 bytes, m25pe16.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsFlashBusy
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteEnable
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serialize
</UL>

<P><STRONG><a name="[7a]"></a>SF_Read</STRONG> (ARM, 68 bytes, Stack size 24 bytes, m25pe16.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = SF_Read &rArr; FlashFastRead &rArr; Serialize
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashFastRead
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_DisplayFont
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_DisplayASC
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_SF_Read
</UL>

<P><STRONG><a name="[7c]"></a>SF_Write</STRONG> (ARM, 112 bytes, Stack size 32 bytes, m25pe16.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = SF_Write &rArr; FlashProgram &rArr; FlashPageProgram &rArr; IsFlashBusy &rArr; FlashReadStatusRegister &rArr; Serialize
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashProgram
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_SF_Write
</UL>

<P><STRONG><a name="[7e]"></a>SF_ErasePage</STRONG> (ARM, 44 bytes, Stack size 8 bytes, m25pe16.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = SF_ErasePage &rArr; FlashPageErase &rArr; IsFlashBusy &rArr; FlashReadStatusRegister &rArr; Serialize
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashPageErase
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_SF_ErasePage
</UL>

<P><STRONG><a name="[169]"></a>PrintString</STRONG> (ARM, 76 bytes, Stack size 16 bytes, printer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PrintString &rArr; PT_SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT_SendChar
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayEtu
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Printer
</UL>

<P><STRONG><a name="[fa]"></a>Init_Printer</STRONG> (ARM, 80 bytes, Stack size 8 bytes, printer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Init_Printer &rArr; PrintString &rArr; PT_SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintString
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitBoard
</UL>

<P><STRONG><a name="[101]"></a>__InitTimer</STRONG> (ARM, 140 bytes, Stack size 8 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __InitTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitBoard
</UL>

<P><STRONG><a name="[100]"></a>InitTimer</STRONG> (ARM, 100 bytes, Stack size 8 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = InitTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitBoard
</UL>

<P><STRONG><a name="[1ef]"></a>SetTimer</STRONG> (ARM, 160 bytes, Stack size 12 bytes, timer.o(.text), UNUSED)

<P><STRONG><a name="[1f0]"></a>KillTimer</STRONG> (ARM, 136 bytes, Stack size 0 bytes, timer.o(.text), UNUSED)

<P><STRONG><a name="[1f1]"></a>__SetTimer</STRONG> (ARM, 116 bytes, Stack size 8 bytes, timer.o(.text), UNUSED)

<P><STRONG><a name="[1f2]"></a>__KillTimer</STRONG> (ARM, 88 bytes, Stack size 0 bytes, timer.o(.text), UNUSED)

<P><STRONG><a name="[105]"></a>__SetSoftTimer</STRONG> (ARM, 112 bytes, Stack size 16 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __SetSoftTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedPrint
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_UART1
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_UART0
</UL>

<P><STRONG><a name="[104]"></a>__KillSoftTimer</STRONG> (ARM, 52 bytes, Stack size 0 bytes, timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_UART1
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_UART0
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM1_TimeoutHandle
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM0_TimeoutHandle
</UL>

<P><STRONG><a name="[fb]"></a>I2C_Init</STRONG> (ARM, 56 bytes, Stack size 8 bytes, iic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_Init &rArr; I2C_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitBoard
</UL>

<P><STRONG><a name="[148]"></a>I2C_ReadByte</STRONG> (ARM, 184 bytes, Stack size 32 bytes, iic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = I2C_ReadByte &rArr; I2C_WriteBus &rArr; I2C_CheckACK
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadBus
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteBus
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_NOACK
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ACK
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTime
</UL>

<P><STRONG><a name="[14a]"></a>I2C_WriteByte</STRONG> (ARM, 136 bytes, Stack size 24 bytes, iic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = I2C_WriteByte &rArr; I2C_WriteBus &rArr; I2C_CheckACK
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteBus
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open_Or_Close_Lock
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open_Or_CloseBeen
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTime
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOControlMode
</UL>

<P><STRONG><a name="[fc]"></a>IOControlMode</STRONG> (ARM, 88 bytes, Stack size 16 bytes, pca9554.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = IOControlMode &rArr; I2C_WriteByte &rArr; I2C_WriteBus &rArr; I2C_CheckACK
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteByte
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayNS
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitBoard
</UL>

<P><STRONG><a name="[173]"></a>Open_Or_CloseBeen</STRONG> (ARM, 100 bytes, Stack size 16 bytes, pca9554.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteByte
</UL>

<P><STRONG><a name="[174]"></a>Open_Or_Close_Lock</STRONG> (ARM, 176 bytes, Stack size 16 bytes, pca9554.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteByte
</UL>

<P><STRONG><a name="[1f3]"></a>IRQ_Exception</STRONG> (ARM, 8 bytes, Stack size 0 bytes, target.o(.text), UNUSED)

<P><STRONG><a name="[32]"></a>FIQ_Exception</STRONG> (ARM, 8 bytes, Stack size 0 bytes, target.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIQ_Handler
</UL>

<P><STRONG><a name="[1f4]"></a>TargetInit</STRONG> (ARM, 4 bytes, Stack size 0 bytes, target.o(.text), UNUSED)

<P><STRONG><a name="[33]"></a>TargetResetInit</STRONG> (ARM, 144 bytes, Stack size 0 bytes, target.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetInit
</UL>

<P><STRONG><a name="[1f5]"></a>__rt_div0</STRONG> (ARM, 16 bytes, Stack size 0 bytes, target.o(.text), UNUSED)

<P><STRONG><a name="[1f6]"></a>fputc</STRONG> (ARM, 20 bytes, Stack size 0 bytes, target.o(.text), UNUSED)

<P><STRONG><a name="[1f7]"></a>fgetc</STRONG> (ARM, 16 bytes, Stack size 0 bytes, target.o(.text), UNUSED)

<P><STRONG><a name="[1f8]"></a>_sys_close</STRONG> (ARM, 16 bytes, Stack size 0 bytes, target.o(.text), UNUSED)

<P><STRONG><a name="[1f9]"></a>_sys_write</STRONG> (ARM, 28 bytes, Stack size 0 bytes, target.o(.text), UNUSED)

<P><STRONG><a name="[1fa]"></a>_sys_read</STRONG> (ARM, 28 bytes, Stack size 0 bytes, target.o(.text), UNUSED)

<P><STRONG><a name="[1aa]"></a>_ttywrch</STRONG> (ARM, 8 bytes, Stack size 0 bytes, target.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display (via Veneer)
</UL>

<P><STRONG><a name="[1fb]"></a>_sys_istty</STRONG> (ARM, 16 bytes, Stack size 0 bytes, target.o(.text), UNUSED)

<P><STRONG><a name="[1fc]"></a>_sys_seek</STRONG> (ARM, 16 bytes, Stack size 0 bytes, target.o(.text), UNUSED)

<P><STRONG><a name="[1fd]"></a>_sys_ensure</STRONG> (ARM, 16 bytes, Stack size 0 bytes, target.o(.text), UNUSED)

<P><STRONG><a name="[1fe]"></a>_sys_flen</STRONG> (ARM, 16 bytes, Stack size 0 bytes, target.o(.text), UNUSED)

<P><STRONG><a name="[1ff]"></a>_sys_tmpnam</STRONG> (ARM, 24 bytes, Stack size 0 bytes, target.o(.text), UNUSED)

<P><STRONG><a name="[6a]"></a>_sys_exit</STRONG> (ARM, 8 bytes, Stack size 0 bytes, target.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit (via Veneer)
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[200]"></a>_sys_command_string</STRONG> (ARM, 20 bytes, Stack size 0 bytes, target.o(.text), UNUSED)

<P><STRONG><a name="[201]"></a>__semihosting$guard</STRONG> (ARM, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[202]"></a>__use_no_semihosting_swi</STRONG> (ARM, 4 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[10a]"></a>malloc</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, h1_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedPrint (via Veneer)
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_SendBuf (via Veneer)
</UL>

<P><STRONG><a name="[106]"></a>free</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedPrint (via Veneer)
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedCLS (via Veneer)
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_UART1 (via Veneer)
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_UART0 (via Veneer)
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>

<P><STRONG><a name="[f6]"></a>__c89vsnprintf</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, c89vsnprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_messagebox (via Veneer)
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_wait_for_retkey (via Veneer)
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_disp_msg (via Veneer)
</UL>

<P><STRONG><a name="[c0]"></a>__2sprintf</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, __2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_disp_press_key (via Veneer)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_disp_consume_success (via Veneer)
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_disp_cancel_consume (via Veneer)
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_disp_user_balance (via Veneer)
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_disp_request_card (via Veneer)
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_inettoa (via Veneer)
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_disp_money (via Veneer)
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_input_money (via Veneer)
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_disp_flash (via Veneer)
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_consume_loop (via Veneer)
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_wait_for_retkey (via Veneer)
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_disp_msg (via Veneer)
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_check_context (via Veneer)
</UL>

<P><STRONG><a name="[178]"></a>_printf_pre_padding</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r2
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[17a]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r2
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[17b]"></a>_printf_str</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r2
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[42]"></a>_printf_int_dec</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_udiv10 (via Veneer)
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u (via Veneer)
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i (via Veneer)
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d (via Veneer)
</UL>

<P><STRONG><a name="[180]"></a>_printf_longlong_hex</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[48]"></a>_printf_int_hex</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x (via Veneer)
</UL>

<P><STRONG><a name="[50]"></a>_printf_ll_hex</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llx (via Veneer)
</UL>

<P><STRONG><a name="[3a]"></a>_printf_hex_ptr</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p (via Veneer)
</UL>

<P><STRONG><a name="[181]"></a>__printf</STRONG> (Thumb, 420 bytes, Stack size 32 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r2
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent (via Veneer)
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r1
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[93]"></a>atoi</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_atoinet (via Veneer)
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_atof_mul100 (via Veneer)
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_cpu_parse_file15 (via Veneer)
</UL>

<P><STRONG><a name="[c4]"></a>strchr</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, strchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_atoinet (via Veneer)
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_input_money (via Veneer)
</UL>

<P><STRONG><a name="[6d]"></a>memcmp</STRONG> (Thumb, 118 bytes, Stack size 4 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_read_syspara (via Veneer)
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_read_transdtl (via Veneer)
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_read_transno_unit (via Veneer)
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_get_transno_lastaddr (via Veneer)
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_check_daysum_amount (via Veneer)
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_input_money (via Veneer)
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_check_blkcard (via Veneer)
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_write_syspara (via Veneer)
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_init_sam_card (via Veneer)
</UL>

<P><STRONG><a name="[c3]"></a>strcpy</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, strcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedPrint (via Veneer)
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_input_money (via Veneer)
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_consume_loop (via Veneer)
</UL>

<P><STRONG><a name="[c2]"></a>strlen</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedPrint (via Veneer)
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_messagebox (via Veneer)
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_wait_for_retkey (via Veneer)
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_disp_money (via Veneer)
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_atof_mul100 (via Veneer)
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_input_money (via Veneer)
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_wait_for_retkey (via Veneer)
</UL>

<P><STRONG><a name="[6e]"></a>__aeabi_memcpy</STRONG> (ARM, 0 bytes, Stack size 0 bytes, rt_memcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTime
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_RATS
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command_Send
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_FIFO
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispayMessage
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedPrint
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_wait_for_retkey
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_SendBuf
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_ReceiveData
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_send_msg
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_read_transno_unit
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_get_transno_lastaddr
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_transdtl
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTime
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_atoinet
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_buffer_to_uint32
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_bigend_to_int
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_write_transdtl
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_uint32_to_buffer
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_atof_mul100
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_check_daysum_amount
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepare_transdtl
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CpuCard_Apdu
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_int_to_bigend
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadICCardUID
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_request_card
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_calc_safe_mac
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_cpu_set_card_loss
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_cpu_get_prove
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_cpu_payment
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_cpucard_read_card
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_cpu_pay_init
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_cpu_parse_file16
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_cpu_parse_file15
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_cpu_parse_file10
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_send_struct
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_get_time
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_init_syspara
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_init_sam_card
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_check_context
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_init_sam_card
</UL>

<P><STRONG><a name="[186]"></a>__rt_memcpy</STRONG> (ARM, 212 bytes, Stack size 0 bytes, rt_memcpy.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[203]"></a>_memcpy_lastbytes</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memcpy.o(.text), UNUSED)

<P><STRONG><a name="[87]"></a>__aeabi_memcpy4</STRONG> (ARM, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_messagebox
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_input_money
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_menu_main
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_menu_sign
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_wait_for_retkey
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[204]"></a>__aeabi_memcpy8</STRONG> (ARM, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[205]"></a>__rt_memcpy_w</STRONG> (ARM, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[206]"></a>_memcpy_lastbytes_aligned</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[d9]"></a>__aeabi_memset</STRONG> (ARM, 16 bytes, Stack size 0 bytes, aeabi_memset.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedPrint
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedCLS
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_update_left_transdtl_info
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdCLS
</UL>

<P><STRONG><a name="[b7]"></a>__aeabi_memclr</STRONG> (ARM, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepare_transdtl
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_init_syspara
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_check_context
</UL>

<P><STRONG><a name="[188]"></a>__rt_memclr</STRONG> (ARM, 64 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[187]"></a>_memset</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[86]"></a>__aeabi_memclr4</STRONG> (ARM, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_FIFO
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_messagebox
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_disp_press_key
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_disp_consume_success
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_disp_cancel_consume
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_disp_user_balance
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_disp_request_card
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_wait_for_retkey
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_ReceiveData
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_send_msg
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_read_transno_unit
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_get_transno_lastaddr
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_transdtl
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_transdtl_section
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_write_transdtl
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_disp_money
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_check_daysum_amount
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_purchase
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_input_money
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_calc_safe_mac
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_cpu_set_card_loss
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_cpu_payment
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_cpucard_read_card
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_send_struct
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_disp_flash
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_consume_loop
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_menu_sign
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_write_syspara
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_wait_for_retkey
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_init_sam_card
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_disp_msg
</UL>

<P><STRONG><a name="[207]"></a>__aeabi_memclr8</STRONG> (ARM, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[208]"></a>__rt_memclr_w</STRONG> (ARM, 84 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[189]"></a>_memset_w</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[8c]"></a>__aeabi_uread4</STRONG> (ARM, 0 bytes, Stack size 0 bytes, uread4.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_disp_consume_success
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_disp_cancel_consume
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_disp_user_balance
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_check_daysum_amount
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepare_transdtl
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_check_blkcard
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_consume_loop
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_show_menu
</UL>

<P><STRONG><a name="[209]"></a>__rt_uread4</STRONG> (ARM, 32 bytes, Stack size 0 bytes, uread4.o(.text), UNUSED)

<P><STRONG><a name="[94]"></a>__aeabi_uwrite4</STRONG> (ARM, 0 bytes, Stack size 0 bytes, uwrite4.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_check_daysum_amount
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_purchase
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepare_transdtl
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_cpu_payment
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_cpu_pay_init
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_cpu_parse_file15
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_init_syspara
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_check_context
</UL>

<P><STRONG><a name="[20a]"></a>__rt_uwrite4</STRONG> (ARM, 32 bytes, Stack size 0 bytes, uwrite4.o(.text), UNUSED)

<P><STRONG><a name="[20b]"></a>__aeabi_idiv</STRONG> (ARM, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[8b]"></a>__aeabi_idivmod</STRONG> (ARM, 384 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTime
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_disp_request_card
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_ByteToDecStr
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_show_menu
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento (via Veneer)
</UL>

<P><STRONG><a name="[175]"></a>__rt_heap_descriptor</STRONG> (ARM, 16 bytes, Stack size 0 bytes, rt_heap_descriptor_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free (via Veneer)
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc (via Veneer)
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc (via Veneer)
</UL>

<P><STRONG><a name="[184]"></a>__aeabi_errno_addr</STRONG> (ARM, 16 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul (via Veneer)
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol (via Veneer)
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi (via Veneer)
</UL>

<P><STRONG><a name="[20c]"></a>__errno$intlibspace</STRONG> (ARM, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[20d]"></a>__rt_errno_addr$intlibspace</STRONG> (ARM, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[20e]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[20f]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[8]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[4]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[176]"></a>__Heap_Full</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_expand
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[18c]"></a>__Heap_Broken</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[5c]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_expand
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_escrow
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[18f]"></a>__Heap_Initialize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[3]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[17c]"></a>_printf_truncate_signed</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[17d]"></a>_printf_truncate_unsigned</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[17f]"></a>_printf_int_common</STRONG> (Thumb, 182 bytes, Stack size 40 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r2
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[38]"></a>_printf_charcount</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, _printf_charcount.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_n (via Veneer)
</UL>

<P><STRONG><a name="[210]"></a>__lib_sel_fp_printf</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, _printf_fp_dec.o(.text), UNUSED)

<P><STRONG><a name="[196]"></a>_printf_fp_dec_real</STRONG> (Thumb, 616 bytes, Stack size 104 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify (via Veneer)
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale (via Veneer)
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_udiv10 (via Veneer)
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r2
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec (via Veneer)
</UL>

<P><STRONG><a name="[177]"></a>_printf_char_common</STRONG> (Thumb, 34 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsnprintf
</UL>

<P><STRONG><a name="[28]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsnprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> __2sprintf.o(.text)
</UL>
<P><STRONG><a name="[27]"></a>_snputc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _snputc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> c89vsnprintf.o(.text)
</UL>
<P><STRONG><a name="[199]"></a>_printf_cs_common</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_mbtowc (Weak Reference)
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[52]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c (via Veneer)
</UL>

<P><STRONG><a name="[54]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s (via Veneer)
</UL>

<P><STRONG><a name="[19b]"></a>_printf_wctomb</STRONG> (Thumb, 188 bytes, Stack size 56 bytes, _printf_wctomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r2
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>

<P><STRONG><a name="[4a]"></a>_printf_longlong_dec</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, _printf_longlong_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10 (via Veneer)
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llu (via Veneer)
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld (via Veneer)
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lli (via Veneer)
</UL>

<P><STRONG><a name="[19d]"></a>_printf_longlong_oct</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[46]"></a>_printf_int_oct</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o (via Veneer)
</UL>

<P><STRONG><a name="[4e]"></a>_printf_ll_oct</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llo (via Veneer)
</UL>

<P><STRONG><a name="[185]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table (via Veneer)
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[17e]"></a>__rt_udiv10</STRONG> (ARM, 44 bytes, Stack size 0 bytes, rtudiv10.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real (via Veneer)
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec (via Veneer)
</UL>

<P><STRONG><a name="[211]"></a>__user_libspace</STRONG> (ARM, 12 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[1a6]"></a>__user_perproc_libspace</STRONG> (ARM, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[212]"></a>__user_perthread_libspace</STRONG> (ARM, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[19e]"></a>__rt_ctype_table</STRONG> (ARM, 24 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb (via Veneer)
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol (via Veneer)
</UL>

<P><STRONG><a name="[5e]"></a>__rt_locale</STRONG> (ARM, 16 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common (via Veneer)
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real (via Veneer)
</UL>

<P><STRONG><a name="[18b]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, h1_extend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[195]"></a>_ll_udiv10</STRONG> (ARM, 160 bytes, Stack size 12 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec (via Veneer)
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits (via Veneer)
</UL>

<P><STRONG><a name="[198]"></a>_printf_fp_infnan</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r2
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[1a0]"></a>_printf_lcs_common</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wc (Weak Reference)
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[56]"></a>_printf_wchar</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc (via Veneer)
</UL>

<P><STRONG><a name="[58]"></a>_printf_wstring</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ls (via Veneer)
</UL>

<P><STRONG><a name="[19f]"></a>_strtoul</STRONG> (Thumb, 170 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[191]"></a>_btod_etento</STRONG> (Thumb, 210 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul (via Veneer)
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv (via Veneer)
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[19c]"></a>_wcrtomb</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, _wcrtomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r3
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>

<P><STRONG><a name="[18d]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[18e]"></a>__rt_heap_escrow</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, heapauxa.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[18a]"></a>__rt_heap_expand</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, heapauxa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __rt_heap_expand
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[63]"></a>__user_setup_stackheap</STRONG> (ARM, 96 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[1a2]"></a>_chval</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[66]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[1a5]"></a>__sig_exit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, defsig_exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __sig_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[1a4]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[1b4]"></a>strcmp</STRONG> (ARM, 156 bytes, Stack size 4 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[1a9]"></a>__default_signal_display</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
</UL>

<P><STRONG><a name="[1bb]"></a>__rt_fp_status_addr</STRONG> (ARM, 16 bytes, Stack size 0 bytes, rt_fp_status_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[213]"></a>__aeabi_uidiv</STRONG> (ARM, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text_udiv), UNUSED)

<P><STRONG><a name="[d3]"></a>__aeabi_uidivmod</STRONG> (ARM, 36 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text_udiv))
<BR><BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div_large
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div2
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div5
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div8
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__SetSoftTimer
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_is_leap_year
</UL>

<P><STRONG><a name="[192]"></a>_btod_d2e</STRONG> (ARM, 56 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e))
<BR><BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits (via Veneer)
</UL>

<P><STRONG><a name="[1b0]"></a>_d2e_denorm_low</STRONG> (ARM, 84 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_denorm_low))
<BR><BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>

<P><STRONG><a name="[1af]"></a>_d2e_norm_op1</STRONG> (ARM, 104 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_norm_op1))
<BR><BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_denorm_low
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
</UL>

<P><STRONG><a name="[1b1]"></a>__btod_div_common</STRONG> (ARM, 716 bytes, Stack size 24 bytes, btod.o(CL$$btod_div_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[1b2]"></a>_e2e</STRONG> (ARM, 220 bytes, Stack size 24 bytes, btod.o(CL$$btod_e2e))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[193]"></a>_btod_ediv</STRONG> (ARM, 52 bytes, Stack size 24 bytes, btod.o(CL$$btod_ediv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _btod_ediv &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento (via Veneer)
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits (via Veneer)
</UL>

<P><STRONG><a name="[194]"></a>_btod_emul</STRONG> (ARM, 52 bytes, Stack size 24 bytes, btod.o(CL$$btod_emul))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento (via Veneer)
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits (via Veneer)
</UL>

<P><STRONG><a name="[1b3]"></a>__btod_mult_common</STRONG> (ARM, 616 bytes, Stack size 16 bytes, btod.o(CL$$btod_mult_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __btod_mult_common
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[145]"></a>SPI_DelayNs_psam</STRONG> (ARM, 28 bytes, Stack size 0 bytes, psam.o(i.SPI_DelayNs_psam))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CosCommand
</UL>

<P><STRONG><a name="[182]"></a>__ARM_common_call_via_r1</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, __printf.o(i.__ARM_common_call_via_r1))
<BR><BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[179]"></a>__ARM_common_call_via_r2</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, _printf_wctomb.o(i.__ARM_common_call_via_r2))
<BR><BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>

<P><STRONG><a name="[1a3]"></a>__ARM_common_call_via_r3</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, _wcrtomb.o(i.__ARM_common_call_via_r3))
<BR><BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
</UL>

<P><STRONG><a name="[197]"></a>__ARM_fpclassify</STRONG> (ARM, 48 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real (via Veneer)
</UL>

<P><STRONG><a name="[61]"></a>_get_lc_numeric</STRONG> (ARM, 80 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _get_lc_numeric &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2 (via Veneer)
</UL>

<P><STRONG><a name="[2a]"></a>_get_lc_ctype</STRONG> (ARM, 80 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2 (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[f2]"></a>__aeabi_ddiv</STRONG> (ARM, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_disp_consume_success
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_disp_user_balance
</UL>

<P><STRONG><a name="[1b5]"></a>_ddiv</STRONG> (ARM, 600 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[214]"></a>__aeabi_i2d</STRONG> (ARM, 0 bytes, Stack size 0 bytes, dflt_noclz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[215]"></a>_dflt</STRONG> (ARM, 88 bytes, Stack size 0 bytes, dflt_noclz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[1b9]"></a>__dflt_normalise</STRONG> (ARM, 0 bytes, Stack size unknown bytes, dflt_noclz.o(x$fpl$dflt), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfltu
</UL>

<P><STRONG><a name="[f0]"></a>__aeabi_ui2d</STRONG> (ARM, 0 bytes, Stack size 0 bytes, dflt_noclz.o(x$fpl$dfltu))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_disp_consume_success
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_disp_user_balance
</UL>

<P><STRONG><a name="[1b8]"></a>_dfltu</STRONG> (ARM, 12 bytes, Stack size 0 bytes, dflt_noclz.o(x$fpl$dfltu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__dflt_normalise
</UL>

<P><STRONG><a name="[f1]"></a>__aeabi_dmul</STRONG> (ARM, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_disp_consume_success
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_disp_user_balance
</UL>

<P><STRONG><a name="[1ba]"></a>_dmul</STRONG> (ARM, 372 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[1b7]"></a>__fpl_dnaninf</STRONG> (ARM, 192 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
</UL>

<P><STRONG><a name="[1b6]"></a>__fpl_dretinf</STRONG> (ARM, 16 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
</UL>

<P><STRONG><a name="[5a]"></a>_fp_init</STRONG> (ARM, 24 bytes, Stack size 8 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _fp_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_fp_status_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (via Veneer)
</UL>

<P><STRONG><a name="[216]"></a>__fplib_config_pureend_doubles</STRONG> (ARM, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[6]"></a>__ieee_status</STRONG> (ARM, 8 bytes, Stack size 0 bytes, istatus.o(x$fpl$ieeestatus))
<BR><BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits (via Veneer)
</UL>

<P><STRONG><a name="[3c]"></a>_printf_fp_dec</STRONG> (ARM, 4 bytes, Stack size 0 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>

<P><STRONG><a name="[217]"></a>__I$use$fp</STRONG> (ARM, 0 bytes, Stack size unknown bytes, usenofp.o(x$fpl$usenofp), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[6b]"></a>do_init_sam_card</STRONG> (ARM, 156 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2188 + Unknown Stack Size
<LI>Call Chain = do_init_sam_card &rArr; sp_init_sam_card &rArr; sp_disp_msg &rArr; LcdPrint &rArr; Lcd_DisplayFont &rArr; SF_Read &rArr; FlashFastRead &rArr; Serialize
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_write_syspara
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_init_sam_card
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_disp_msg
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2e]"></a>do_menu_set</STRONG> (ARM, 88 bytes, Stack size 16 bytes, sp_menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1380 + Unknown Stack Size
<LI>Call Chain = do_menu_set &rArr; sp_disp_msg &rArr; LcdPrint &rArr; Lcd_DisplayFont &rArr; SF_Read &rArr; FlashFastRead &rArr; Serialize
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_get_key
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_disp_msg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sp_menu.o(.constdata)
</UL>
<P><STRONG><a name="[80]"></a>do_consume_constant</STRONG> (ARM, 28 bytes, Stack size 8 bytes, sp_menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1372 + Unknown Stack Size
<LI>Call Chain = do_consume_constant &rArr; sp_disp_msg &rArr; LcdPrint &rArr; Lcd_DisplayFont &rArr; SF_Read &rArr; FlashFastRead &rArr; Serialize
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_disp_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_menu_consume
</UL>

<P><STRONG><a name="[81]"></a>do_consume_normal</STRONG> (ARM, 124 bytes, Stack size 16 bytes, sp_menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2844 + Unknown Stack Size
<LI>Call Chain = do_consume_normal &rArr; sp_consume_loop &rArr; do_purchase &rArr; sp_set_card_loss &rArr; do_cpu_set_card_loss &rArr; sp_calc_safe_mac &rArr; sp_disp_msg &rArr; LcdPrint &rArr; Lcd_DisplayFont &rArr; SF_Read &rArr; FlashFastRead &rArr; Serialize
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_pre_check
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_get_time
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_get_key
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_consume_loop
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_DelayNS2
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_disp_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_menu_consume
</UL>

<P><STRONG><a name="[2c]"></a>do_menu_sign</STRONG> (ARM, 532 bytes, Stack size 232 bytes, sp_menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2928 + Unknown Stack Size
<LI>Call Chain = do_menu_sign &rArr; sp_send_struct &rArr; sp_send_msg &rArr; do_send_msg &rArr; COM_SendBuf &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_send_struct
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_get_key
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_disp_msg
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sp_menu.o(.constdata)
</UL>
<P><STRONG><a name="[2d]"></a>do_menu_showinfo</STRONG> (ARM, 28 bytes, Stack size 8 bytes, sp_menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4028 + Unknown Stack Size
<LI>Call Chain = do_menu_showinfo &rArr; sp_disp_flash &rArr; sp_wait_for_retkey &rArr; do_wait_for_retkey &rArr; LcdPrint &rArr; Lcd_DisplayFont &rArr; SF_Read &rArr; FlashFastRead &rArr; Serialize
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_disp_flash
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sp_menu.o(.constdata)
</UL>
<P><STRONG><a name="[2b]"></a>do_menu_keep</STRONG> (ARM, 116 bytes, Stack size 16 bytes, sp_menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1380 + Unknown Stack Size
<LI>Call Chain = do_menu_keep &rArr; sp_disp_msg &rArr; LcdPrint &rArr; Lcd_DisplayFont &rArr; SF_Read &rArr; FlashFastRead &rArr; Serialize
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_get_key
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_disp_msg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sp_menu.o(.constdata)
</UL>
<P><STRONG><a name="[8a]"></a>do_show_menu</STRONG> (ARM, 840 bytes, Stack size 64 bytes, sp_menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 252 + Unknown Stack Size
<LI>Call Chain = do_show_menu &rArr; LcdPrint &rArr; Lcd_DisplayFont &rArr; SF_Read &rArr; FlashFastRead &rArr; Serialize
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_get_key
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdPrint
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdCLS
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_menu_main
</UL>

<P><STRONG><a name="[8d]"></a>do_menu_main</STRONG> (ARM, 56 bytes, Stack size 72 bytes, sp_menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = do_menu_main &rArr; do_show_menu &rArr; LcdPrint &rArr; Lcd_DisplayFont &rArr; SF_Read &rArr; FlashFastRead &rArr; Serialize
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_show_menu
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_menu_consume
</UL>

<P><STRONG><a name="[9e]"></a>uint16_to_pboc</STRONG> (ARM, 16 bytes, Stack size 0 bytes, sp_cardoper.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_cpu_get_prove
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_cpu_payment
</UL>

<P><STRONG><a name="[9f]"></a>uint32_to_pboc</STRONG> (ARM, 40 bytes, Stack size 0 bytes, sp_cardoper.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_cpu_payment
</UL>

<P><STRONG><a name="[90]"></a>pboc_to_uint16</STRONG> (ARM, 28 bytes, Stack size 0 bytes, sp_cardoper.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_cpu_pay_init
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_cpu_parse_file12
</UL>

<P><STRONG><a name="[99]"></a>pboc_to_uint32</STRONG> (ARM, 68 bytes, Stack size 4 bytes, sp_cardoper.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = pboc_to_uint32
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_cpu_payment
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_cpu_pay_init
</UL>

<P><STRONG><a name="[8e]"></a>do_cpu_parse_file10</STRONG> (ARM, 148 bytes, Stack size 24 bytes, sp_cardoper.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = do_cpu_parse_file10
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_cpucard_read_card
</UL>

<P><STRONG><a name="[8f]"></a>do_cpu_parse_file12</STRONG> (ARM, 52 bytes, Stack size 24 bytes, sp_cardoper.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = do_cpu_parse_file12
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pboc_to_uint16
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_cpucard_read_card
</UL>

<P><STRONG><a name="[91]"></a>do_cpu_parse_file15</STRONG> (ARM, 136 bytes, Stack size 40 bytes, sp_cardoper.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = do_cpu_parse_file15 &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_bcd_hex
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_parse_file15
</UL>

<P><STRONG><a name="[95]"></a>do_cpu_parse_file16</STRONG> (ARM, 64 bytes, Stack size 24 bytes, sp_cardoper.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = do_cpu_parse_file16
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_cpucard_read_card
</UL>

<P><STRONG><a name="[96]"></a>do_cpu_pay_init</STRONG> (ARM, 444 bytes, Stack size 544 bytes, sp_cardoper.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1908 + Unknown Stack Size
<LI>Call Chain = do_cpu_pay_init &rArr; sp_disp_msg &rArr; LcdPrint &rArr; Lcd_DisplayFont &rArr; SF_Read &rArr; FlashFastRead &rArr; Serialize
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_int_to_bigend
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_cpu_adpu_command
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pboc_to_uint32
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pboc_to_uint16
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_disp_msg
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_payinit
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_cpucard_read_card
</UL>

<P><STRONG><a name="[9b]"></a>do_cpucard_read_card</STRONG> (ARM, 876 bytes, Stack size 544 bytes, sp_cardoper.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2452 + Unknown Stack Size
<LI>Call Chain = do_cpucard_read_card &rArr; do_cpu_pay_init &rArr; sp_disp_msg &rArr; LcdPrint &rArr; Lcd_DisplayFont &rArr; SF_Read &rArr; FlashFastRead &rArr; Serialize
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_cpu_adpu_command
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_parse_file15
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_cpu_pay_init
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_cpu_parse_file16
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_cpu_parse_file12
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_cpu_parse_file10
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_disp_msg
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_read_card
</UL>

<P><STRONG><a name="[9c]"></a>do_cpu_payment</STRONG> (ARM, 1124 bytes, Stack size 552 bytes, sp_cardoper.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1916 + Unknown Stack Size
<LI>Call Chain = do_cpu_payment &rArr; sp_disp_msg &rArr; LcdPrint &rArr; Lcd_DisplayFont &rArr; SF_Read &rArr; FlashFastRead &rArr; Serialize
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_sam_adpu_command
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_cpu_adpu_command
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pboc_to_uint32
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint32_to_pboc
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_to_pboc
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_disp_msg
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_payment
</UL>

<P><STRONG><a name="[a0]"></a>do_cpu_get_prove</STRONG> (ARM, 180 bytes, Stack size 536 bytes, sp_cardoper.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = do_cpu_get_prove &rArr; sp_cpu_adpu_command &rArr; do_adpu_command
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_cpu_adpu_command
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_to_pboc
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_get_prove
</UL>

<P><STRONG><a name="[a2]"></a>do_cpu_set_card_loss</STRONG> (ARM, 260 bytes, Stack size 544 bytes, sp_cardoper.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2468 + Unknown Stack Size
<LI>Call Chain = do_cpu_set_card_loss &rArr; sp_calc_safe_mac &rArr; sp_disp_msg &rArr; LcdPrint &rArr; Lcd_DisplayFont &rArr; SF_Read &rArr; FlashFastRead &rArr; Serialize
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_cpu_adpu_command
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_calc_safe_mac
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_set_card_loss
</UL>

<P><STRONG><a name="[15]"></a>sam_adpu_proxy</STRONG> (ARM, 52 bytes, Stack size 16 bytes, rfmod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = sam_adpu_proxy &rArr; CosCommand &rArr; Psam_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CosCommand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rfmod.o(.text)
</UL>
<P><STRONG><a name="[14]"></a>cpu_adpu_proxy</STRONG> (ARM, 48 bytes, Stack size 16 bytes, rfmod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1316<LI>Call Chain = cpu_adpu_proxy &rArr; CpuCard_Apdu &rArr; Command_Send &rArr; Read_FIFO &rArr; RF_ReadReg
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CpuCard_Apdu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rfmod.o(.text)
</UL>
<P><STRONG><a name="[b0]"></a>do_adpu_command</STRONG> (ARM, 68 bytes, Stack size 16 bytes, rfmod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = do_adpu_command
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_sam_adpu_command
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_cpu_adpu_command
</UL>

<P><STRONG><a name="[b3]"></a>is_blkcard</STRONG> (ARM, 108 bytes, Stack size 96 bytes, sp_consume.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = is_blkcard &rArr; sp_SF_Read &rArr; SF_Read &rArr; FlashFastRead &rArr; Serialize
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_bitmap_transform
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_SF_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_check_blkcard
</UL>

<P><STRONG><a name="[b5]"></a>do_check_blkcard</STRONG> (ARM, 76 bytes, Stack size 16 bytes, sp_consume.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = do_check_blkcard &rArr; is_blkcard &rArr; sp_SF_Read &rArr; SF_Read &rArr; FlashFastRead &rArr; Serialize
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_blkcard
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_purchase
</UL>

<P><STRONG><a name="[b6]"></a>prepare_transdtl</STRONG> (ARM, 304 bytes, Stack size 32 bytes, sp_consume.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 492<LI>Call Chain = prepare_transdtl &rArr; sp_get_transno &rArr; sp_read_transno_unit &rArr; sp_SF_Read &rArr; SF_Read &rArr; FlashFastRead &rArr; Serialize
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_get_transno
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_purchase
</UL>

<P><STRONG><a name="[c9]"></a>do_update_sum_amt</STRONG> (ARM, 4 bytes, Stack size 0 bytes, sp_consume.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_purchase
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_consume_loop
</UL>

<P><STRONG><a name="[b9]"></a>do_request_card</STRONG> (ARM, 244 bytes, Stack size 32 bytes, sp_consume.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1428 + Unknown Stack Size
<LI>Call Chain = do_request_card &rArr; sp_request_card &rArr; sp_cpucard_deselect &rArr; sp_disp_msg &rArr; LcdPrint &rArr; Lcd_DisplayFont &rArr; SF_Read &rArr; FlashFastRead &rArr; Serialize
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_encode_hex
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_cpucard_poweron
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_request_card
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_disp_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_consume_loop
</UL>

<P><STRONG><a name="[be]"></a>do_input_money</STRONG> (ARM, 608 bytes, Stack size 176 bytes, sp_consume.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1572 + Unknown Stack Size
<LI>Call Chain = do_input_money &rArr; sp_request_card &rArr; sp_cpucard_deselect &rArr; sp_disp_msg &rArr; LcdPrint &rArr; Lcd_DisplayFont &rArr; SF_Read &rArr; FlashFastRead &rArr; Serialize
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_is_number_key
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_disp_money
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_atof_mul100
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_request_card
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_get_key
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_disp_msg
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen (via Veneer)
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy (via Veneer)
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp (via Veneer)
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr (via Veneer)
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_consume_loop
</UL>

<P><STRONG><a name="[c6]"></a>do_purchase</STRONG> (ARM, 476 bytes, Stack size 96 bytes, sp_consume.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2580 + Unknown Stack Size
<LI>Call Chain = do_purchase &rArr; sp_set_card_loss &rArr; do_cpu_set_card_loss &rArr; sp_calc_safe_mac &rArr; sp_disp_msg &rArr; LcdPrint &rArr; Lcd_DisplayFont &rArr; SF_Read &rArr; FlashFastRead &rArr; Serialize
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_write_transdtl
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_disp_by_type
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_update_sum_amt
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepare_transdtl
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_check_blkcard
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_set_card_loss
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_payment
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_payinit
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_disp_msg
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_consume_loop
</UL>

<P><STRONG><a name="[de]"></a>sp_get_next_transdtl_addr</STRONG> (ARM, 36 bytes, Stack size 0 bytes, sp_flash_impl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_write_transdtl
</UL>

<P><STRONG><a name="[df]"></a>sp_do_write_card</STRONG> (ARM, 12 bytes, Stack size 0 bytes, sp_flash_impl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_write_transdtl
</UL>

<P><STRONG><a name="[d8]"></a>sp_update_left_transdtl_info</STRONG> (ARM, 136 bytes, Stack size 32 bytes, sp_flash_impl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 228 + Unknown Stack Size
<LI>Call Chain = sp_update_left_transdtl_info &rArr; sp_SF_Write &rArr; SF_Write &rArr; FlashProgram &rArr; FlashPageProgram &rArr; IsFlashBusy &rArr; FlashReadStatusRegister &rArr; Serialize
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_protocol_crc
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_SF_Write
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_write_transdtl
</UL>

<P><STRONG><a name="[e2]"></a>reset_transdtl_section</STRONG> (ARM, 356 bytes, Stack size 88 bytes, sp_flash_impl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1452 + Unknown Stack Size
<LI>Call Chain = reset_transdtl_section &rArr; sp_disp_msg &rArr; LcdPrint &rArr; Lcd_DisplayFont &rArr; SF_Read &rArr; FlashFastRead &rArr; Serialize
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_protocol_crc
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_get_transno
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_SF_ErasePage
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_SF_Write
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_disp_msg
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_transdtl
</UL>

<P><STRONG><a name="[e3]"></a>reset_transdtl</STRONG> (ARM, 288 bytes, Stack size 40 bytes, sp_flash_impl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1492 + Unknown Stack Size
<LI>Call Chain = reset_transdtl &rArr; reset_transdtl_section &rArr; sp_disp_msg &rArr; LcdPrint &rArr; Lcd_DisplayFont &rArr; SF_Read &rArr; FlashFastRead &rArr; Serialize
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_transdtl_section
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_protocol_crc
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_SF_ErasePage
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_SF_Write
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_init_transdtl
</UL>

<P><STRONG><a name="[e4]"></a>do_init_transdtl</STRONG> (ARM, 196 bytes, Stack size 120 bytes, sp_flash_impl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1484 + Unknown Stack Size
<LI>Call Chain = do_init_transdtl &rArr; sp_disp_msg &rArr; LcdPrint &rArr; Lcd_DisplayFont &rArr; SF_Read &rArr; FlashFastRead &rArr; Serialize
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_read_transdtl
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_read_transno_unit
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_disp_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_init_transdtl
</UL>

<P><STRONG><a name="[e7]"></a>get_std_ctl_len</STRONG> (ARM, 28 bytes, Stack size 8 bytes, sp_communicate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_std_ctl_len
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_send_msg
</UL>

<P><STRONG><a name="[e6]"></a>do_send_msg</STRONG> (ARM, 124 bytes, Stack size 2080 bytes, sp_communicate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2160<LI>Call Chain = do_send_msg &rArr; COM_SendBuf &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_SendBuf
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_std_ctl_len
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_send_msg
</UL>

<P><STRONG><a name="[16]"></a>sp_ReceiveData</STRONG> (ARM, 120 bytes, Stack size 248 bytes, sp_communicate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1612 + Unknown Stack Size
<LI>Call Chain = sp_ReceiveData &rArr; sp_disp_msg &rArr; LcdPrint &rArr; Lcd_DisplayFont &rArr; SF_Read &rArr; FlashFastRead &rArr; Serialize
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_disp_msg
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sp_communicate.o(.text)
</UL>
<P><STRONG><a name="[ec]"></a>do_wait_for_retkey</STRONG> (ARM, 512 bytes, Stack size 152 bytes, sp_disp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 340 + Unknown Stack Size
<LI>Call Chain = do_wait_for_retkey &rArr; LcdPrint &rArr; Lcd_DisplayFont &rArr; SF_Read &rArr; FlashFastRead &rArr; Serialize
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_get_min
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_get_key
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdPrint
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdCLS
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;messagebox_yes_no
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_wait_for_retkey
</UL>

<P><STRONG><a name="[ed]"></a>do_disp_request_card</STRONG> (ARM, 664 bytes, Stack size 88 bytes, sp_disp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 276 + Unknown Stack Size
<LI>Call Chain = do_disp_request_card &rArr; LcdPrint &rArr; Lcd_DisplayFont &rArr; SF_Read &rArr; FlashFastRead &rArr; Serialize
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTime
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_copy_systime
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdPrint
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdCLS
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_disp_by_type
</UL>

<P><STRONG><a name="[ef]"></a>do_disp_user_balance</STRONG> (ARM, 264 bytes, Stack size 72 bytes, sp_disp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 260 + Unknown Stack Size
<LI>Call Chain = do_disp_user_balance &rArr; LcdPrint &rArr; Lcd_DisplayFont &rArr; SF_Read &rArr; FlashFastRead &rArr; Serialize
</UL>
<BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdPrint
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdCLS
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_disp_by_type
</UL>

<P><STRONG><a name="[f3]"></a>do_disp_cancel_consume</STRONG> (ARM, 388 bytes, Stack size 64 bytes, sp_disp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 252 + Unknown Stack Size
<LI>Call Chain = do_disp_cancel_consume &rArr; LcdPrint &rArr; Lcd_DisplayFont &rArr; SF_Read &rArr; FlashFastRead &rArr; Serialize
</UL>
<BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdPrint
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdCLS
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_disp_by_type
</UL>

<P><STRONG><a name="[f4]"></a>do_disp_consume_success</STRONG> (ARM, 352 bytes, Stack size 80 bytes, sp_disp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 268 + Unknown Stack Size
<LI>Call Chain = do_disp_consume_success &rArr; LcdPrint &rArr; Lcd_DisplayFont &rArr; SF_Read &rArr; FlashFastRead &rArr; Serialize
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_get_key
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdPrint
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdCLS
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_disp_by_type
</UL>

<P><STRONG><a name="[f5]"></a>do_disp_insufficient_balance</STRONG> (ARM, 120 bytes, Stack size 8 bytes, sp_disp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196 + Unknown Stack Size
<LI>Call Chain = do_disp_insufficient_balance &rArr; LcdPrint &rArr; Lcd_DisplayFont &rArr; SF_Read &rArr; FlashFastRead &rArr; Serialize
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_get_key
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdPrint
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdCLS
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_disp_by_type
</UL>

<P><STRONG><a name="[f7]"></a>messagebox_yes_no</STRONG> (ARM, 32 bytes, Stack size 8 bytes, sp_disp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_wait_for_retkey
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sp_messagebox
</UL>

<P><STRONG><a name="[1e]"></a>COM0_TimeoutHandle</STRONG> (ARM, 80 bytes, Stack size 8 bytes, comm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = COM0_TimeoutHandle
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__KillSoftTimer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> comm.o(.text)
</UL>
<P><STRONG><a name="[1f]"></a>COM1_TimeoutHandle</STRONG> (ARM, 80 bytes, Stack size 8 bytes, comm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = COM1_TimeoutHandle
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__KillSoftTimer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> comm.o(.text)
</UL>
<P><STRONG><a name="[20]"></a>IRQ_UART0</STRONG> (ARM, 336 bytes, Stack size 32 bytes, comm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = IRQ_UART0 &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free (via Veneer)
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__SetSoftTimer
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__KillSoftTimer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> comm.o(.text)
</UL>
<P><STRONG><a name="[21]"></a>IRQ_UART1</STRONG> (ARM, 348 bytes, Stack size 32 bytes, comm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = IRQ_UART1 &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free (via Veneer)
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__SetSoftTimer
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__KillSoftTimer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> comm.o(.text)
</UL>
<P><STRONG><a name="[108]"></a>UART0_Init</STRONG> (ARM, 108 bytes, Stack size 8 bytes, comm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART0_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[109]"></a>UART1_Init</STRONG> (ARM, 140 bytes, Stack size 8 bytes, comm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART1_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[107]"></a>UART_Init</STRONG> (ARM, 376 bytes, Stack size 24 bytes, comm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = UART_Init &rArr; UART1_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Init
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Init
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartComm
</UL>

<P><STRONG><a name="[10c]"></a>Delay8us_7279</STRONG> (ARM, 28 bytes, Stack size 0 bytes, hd7279a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Send
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Eint3
</UL>

<P><STRONG><a name="[10b]"></a>Delay50us_7279</STRONG> (ARM, 28 bytes, Stack size 0 bytes, hd7279a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Send
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Eint3
</UL>

<P><STRONG><a name="[22]"></a>IRQ_Eint3</STRONG> (ARM, 324 bytes, Stack size 32 bytes, hd7279a.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IRQ_Eint3
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay50us_7279
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay8us_7279
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hd7279a.o(.text)
</UL>
<P><STRONG><a name="[10e]"></a>Data_Send</STRONG> (ARM, 208 bytes, Stack size 24 bytes, hd7279a.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay50us_7279
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay8us_7279
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedPrint
</UL>

<P><STRONG><a name="[112]"></a>LCD_DelayN20ns</STRONG> (ARM, 24 bytes, Stack size 0 bytes, lcd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDataOrCmd
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdInit
</UL>

<P><STRONG><a name="[111]"></a>WriteDataOrCmd</STRONG> (ARM, 652 bytes, Stack size 24 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = WriteDataOrCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DelayN20ns
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRAM_N_Column
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetColumn
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPage
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayOff
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayOn
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunctionSet
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdInit
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdCLS
</UL>

<P><STRONG><a name="[113]"></a>FunctionSet</STRONG> (ARM, 60 bytes, Stack size 16 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FunctionSet &rArr; WriteDataOrCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDataOrCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdInit
</UL>

<P><STRONG><a name="[114]"></a>DisplayOn</STRONG> (ARM, 24 bytes, Stack size 8 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DisplayOn &rArr; WriteDataOrCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDataOrCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdInit
</UL>

<P><STRONG><a name="[115]"></a>DisplayOff</STRONG> (ARM, 24 bytes, Stack size 8 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DisplayOff &rArr; WriteDataOrCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDataOrCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdInit
</UL>

<P><STRONG><a name="[116]"></a>SetPage</STRONG> (ARM, 28 bytes, Stack size 8 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SetPage &rArr; WriteDataOrCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDataOrCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRAM_N_Column
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdCLS
</UL>

<P><STRONG><a name="[117]"></a>SetColumn</STRONG> (ARM, 48 bytes, Stack size 8 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SetColumn &rArr; WriteDataOrCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDataOrCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRAM_N_Column
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdCLS
</UL>

<P><STRONG><a name="[118]"></a>WriteRAM_N_Column</STRONG> (ARM, 108 bytes, Stack size 32 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = WriteRAM_N_Column &rArr; SetColumn &rArr; WriteDataOrCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetColumn
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPage
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDataOrCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_DisplayFont
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_DisplayASC
</UL>

<P><STRONG><a name="[119]"></a>Lcd_DisplayASC</STRONG> (ARM, 144 bytes, Stack size 56 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = Lcd_DisplayASC &rArr; SF_Read &rArr; FlashFastRead &rArr; Serialize
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRAM_N_Column
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdPrint
</UL>

<P><STRONG><a name="[11a]"></a>Lcd_DisplayFont</STRONG> (ARM, 156 bytes, Stack size 64 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = Lcd_DisplayFont &rArr; SF_Read &rArr; FlashFastRead &rArr; Serialize
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRAM_N_Column
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdPrint
</UL>

<P><STRONG><a name="[141]"></a>memxcpy</STRONG> (ARM, 48 bytes, Stack size 0 bytes, mifare.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CpuCard_Apdu
</UL>

<P><STRONG><a name="[143]"></a>Psam_RecvByte</STRONG> (ARM, 440 bytes, Stack size 16 bytes, psam.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Psam_RecvByte
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CosCommand
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rst_Psam_Card
</UL>

<P><STRONG><a name="[144]"></a>Psam_SendByte</STRONG> (ARM, 568 bytes, Stack size 24 bytes, psam.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Psam_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CosCommand
</UL>

<P><STRONG><a name="[14f]"></a>SF_Delay</STRONG> (ARM, 28 bytes, Stack size 0 bytes, m25pe16.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_Init
</UL>

<P><STRONG><a name="[14e]"></a>FL_Init</STRONG> (ARM, 160 bytes, Stack size 8 bytes, m25pe16.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FL_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_Init
</UL>

<P><STRONG><a name="[150]"></a>Serialize</STRONG> (ARM, 184 bytes, Stack size 28 bytes, m25pe16.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Serialize
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureSpiMaster
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteLockRegister
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashReadLockRegister
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashReleaseFromDeepPowerDown
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashDeepPowerDown
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashBulkErase
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashSectorErase
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashPageErase
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashPageProgram
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashPageWrite
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_ReadContinuous
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashFastRead
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashRead
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashReadStatusRegister
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashReadManufacturerIdentification
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashReadDeviceIdentification
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteDisable
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteEnable
</UL>

<P><STRONG><a name="[168]"></a>DelayEtu</STRONG> (ARM, 24 bytes, Stack size 0 bytes, printer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintString
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT_SendChar
</UL>

<P><STRONG><a name="[167]"></a>PT_SendChar</STRONG> (ARM, 112 bytes, Stack size 16 bytes, printer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PT_SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayEtu
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintString
</UL>

<P><STRONG><a name="[25]"></a>IRQ_Timer0</STRONG> (ARM, 488 bytes, Stack size 32 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IRQ_Timer0
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BeeperCtr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer.o(.text)
</UL>
<P><STRONG><a name="[26]"></a>IRQ_Timer1</STRONG> (ARM, 532 bytes, Stack size 24 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IRQ_Timer1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer.o(.text)
</UL>
<P><STRONG><a name="[16c]"></a>I2C_DelayNs</STRONG> (ARM, 24 bytes, Stack size 0 bytes, iic.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadBus
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteBus
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_CheckACK
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_NOACK
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ACK
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
</UL>

<P><STRONG><a name="[16b]"></a>I2C_Start</STRONG> (ARM, 92 bytes, Stack size 8 bytes, iic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DelayNs
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteByte
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadByte
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
</UL>

<P><STRONG><a name="[16d]"></a>I2C_Stop</STRONG> (ARM, 72 bytes, Stack size 8 bytes, iic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DelayNs
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteByte
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadByte
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
</UL>

<P><STRONG><a name="[16e]"></a>I2C_ACK</STRONG> (ARM, 72 bytes, Stack size 8 bytes, iic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_ACK
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DelayNs
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadByte
</UL>

<P><STRONG><a name="[16f]"></a>I2C_NOACK</STRONG> (ARM, 72 bytes, Stack size 8 bytes, iic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_NOACK
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DelayNs
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadByte
</UL>

<P><STRONG><a name="[170]"></a>I2C_CheckACK</STRONG> (ARM, 148 bytes, Stack size 8 bytes, iic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_CheckACK
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DelayNs
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteBus
</UL>

<P><STRONG><a name="[171]"></a>I2C_WriteBus</STRONG> (ARM, 144 bytes, Stack size 16 bytes, iic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_WriteBus &rArr; I2C_CheckACK
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_CheckACK
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DelayNs
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteByte
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadByte
</UL>

<P><STRONG><a name="[172]"></a>I2C_ReadBus</STRONG> (ARM, 188 bytes, Stack size 16 bytes, iic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_ReadBus
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DelayNs
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadByte
</UL>

<P><STRONG><a name="[b]"></a>Undefined</STRONG> (ARM, 0 bytes, Stack size unknown bytes, Startup.o(vectors))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Undefined
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Undefined
</UL>
<BR>[Address Reference Count : 1]<UL><LI> Startup.o(vectors)
</UL>
<P><STRONG><a name="[c]"></a>SoftwareInterrupt</STRONG> (ARM, 0 bytes, Stack size unknown bytes, Startup.o(vectors))
<BR>[Address Reference Count : 1]<UL><LI> Startup.o(vectors)
</UL>
<P><STRONG><a name="[f]"></a>IRQDisable</STRONG> (ARM, 0 bytes, Stack size unknown bytes, Startup.o(vectors))
<BR>[Address Reference Count : 1]<UL><LI> Startup.o(vectors)
</UL>
<P><STRONG><a name="[10]"></a>IRQEnable</STRONG> (ARM, 0 bytes, Stack size unknown bytes, Startup.o(vectors))
<BR>[Address Reference Count : 1]<UL><LI> Startup.o(vectors)
</UL>
<P><STRONG><a name="[11]"></a>FIQDisable</STRONG> (ARM, 0 bytes, Stack size unknown bytes, Startup.o(vectors))
<BR>[Address Reference Count : 1]<UL><LI> Startup.o(vectors)
</UL>
<P><STRONG><a name="[12]"></a>FIQEnable</STRONG> (ARM, 0 bytes, Stack size unknown bytes, Startup.o(vectors))
<BR>[Address Reference Count : 1]<UL><LI> Startup.o(vectors)
</UL>
<P><STRONG><a name="[d]"></a>PrefetchAbort</STRONG> (ARM, 0 bytes, Stack size unknown bytes, Startup.o(vectors))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrefetchAbort
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrefetchAbort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> Startup.o(vectors)
</UL>
<P><STRONG><a name="[e]"></a>FIQ_Handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, Startup.o(vectors))
<BR><BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIQ_Exception
</UL>
<BR>[Address Reference Count : 1]<UL><LI> Startup.o(vectors)
</UL>
<P><STRONG><a name="[1ad]"></a>__arm_div8</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[1ac]"></a>__arm_div5</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[1ab]"></a>__arm_div2</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[1ae]"></a>__arm_div_large</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[190]"></a>_fp_digits</STRONG> (Thumb, 408 bytes, Stack size 88 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee_status (via Veneer)
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul (via Veneer)
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv (via Veneer)
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e (via Veneer)
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[29]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[1a7]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[40]"></a>_printf_fp_hex</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_a
</UL>

<P><STRONG><a name="[19a]"></a>_printf_mbtowc</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[1a1]"></a>_printf_wc</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<HR></body></html>
